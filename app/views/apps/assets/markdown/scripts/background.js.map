{"version":3,"sources":["scripts/background.js"],"names":["init","getLicense","xhrWithAuth","CWS_LICENSE_API_URL","chrome","runtime","id","onLicenseFetched","error","status","response","JSON","parse","parseLicense","save","license","result","accessLevel","daysAgoLicenseIssued","Date","now","parseInt","createdTime","TRIAL_PERIOD_DAYS","value","storage","sync","set","console","log","method","url","interactive","callback","getToken","identity","getAuthToken","token","lastError","access_token","requestStart","xhr","XMLHttpRequest","open","setRequestHeader","onload","requestComplete","send","this","retry","removeCachedAuthToken","statusDiv"],"mappings":"AAAA,YAOA,SAASA,QAEPC,aAOF,QAASA,cACPC,YAAY,MAAOC,oBAAsBC,OAAOC,QAAQC,IAAI,EAAMC,kBAGpE,QAASA,kBAAiBC,EAAOC,EAAQC,GACvCA,EAAWC,KAAKC,MAAMF,GAEP,MAAXD,EACFI,aAAaH,GAEbI,KAAK,QAYT,QAASD,cAAaE,GAGpB,GAAIA,EAAQC,QAAiC,QAAvBD,EAAQE,YAC5BH,KAAK,YACA,IAAIC,EAAQC,QAAiC,cAAvBD,EAAQE,YAA6B,CAChE,GAAIC,GAAuBC,KAAKC,MAAQC,SAASN,EAAQO,YAAa,GACtEJ,GAAuBA,EAAuB,IAAO,GAAK,GAAK,GAE7DJ,KADEI,GAAwBK,kBACrB,QAEA,eAGPT,MAAK,QAIT,QAASA,MAAKU,GACZpB,OAAOqB,QAAQC,KAAKC,KAClBZ,QAASS,GACR,WACDI,QAAQC,IAAI,mBAAqBL,KASrC,QAAStB,aAAY4B,EAAQC,EAAKC,EAAaC,GAI7C,QAASC,KACP9B,OAAO+B,SAASC,cACdJ,YAAaA,GACZ,SAAUK,GACX,MAAIjC,QAAOC,QAAQiC,cACjBL,GAAS7B,OAAOC,QAAQiC,YAG1BC,aAAeF,MACfG,QAIJ,QAASA,KACP,GAAIC,GAAM,GAAIC,eACdD,GAAIE,KAAKb,EAAQC,GACjBU,EAAIG,iBAAiB,gBAAiB,UAAYL,cAClDE,EAAII,OAASC,EACbL,EAAIM,OAGN,QAASD,KACY,KAAfE,KAAKvC,QAAiBwC,GACxBA,GAAQ,EACR7C,OAAO+B,SAASe,uBACdb,MAAOE,cACNL,IAEHD,EAAS,KAAMe,KAAKvC,OAAQuC,KAAKtC,UA/BrC,GAAIuC,IAAQ,CACZf,KArEF,GAAI/B,qBAAsB,+DACtBoB,kBAAoB,EACpB4B,UACAZ,YAqGJvC","file":"background.js","sourcesContent":["'use strict';\n\nvar CWS_LICENSE_API_URL = 'https://www.googleapis.com/chromewebstore/v1.1/userlicenses/';\nvar TRIAL_PERIOD_DAYS = 2;\nvar statusDiv;\nvar access_token;\n\nfunction init() {\n\n  getLicense();\n}\n\n/*****************************************************************************\n * Call to license server to request the license\n *****************************************************************************/\n\nfunction getLicense() {\n  xhrWithAuth('GET', CWS_LICENSE_API_URL + chrome.runtime.id, true, onLicenseFetched);\n}\n\nfunction onLicenseFetched(error, status, response) {\n  response = JSON.parse(response);\n\n  if (status === 200) {\n    parseLicense(response);\n  } else {\n    save('NONE');\n  }\n}\n\n/*****************************************************************************\n * Parse the license and determine if the user should get a free trial\n *  - if license.accessLevel == 'FULL', they've paid for the app\n *  - if license.accessLevel == 'FREE_TRIAL' they haven't paid\n *    - If they've used the app for less than TRIAL_PERIOD_DAYS days, free trial\n *    - Otherwise, the free trial has expired \n *****************************************************************************/\n\nfunction parseLicense(license) {\n  var licenseStatus;\n  var licenseStatusText;\n  if (license.result && license.accessLevel == 'FULL') {\n    save('FULL');\n  } else if (license.result && license.accessLevel == 'FREE_TRIAL') {\n    var daysAgoLicenseIssued = Date.now() - parseInt(license.createdTime, 10);\n    daysAgoLicenseIssued = daysAgoLicenseIssued / 1000 / 60 / 60 / 24;\n    if (daysAgoLicenseIssued <= TRIAL_PERIOD_DAYS) {\n      save('TRIAL');\n    } else {\n      save('EXPIRED');\n    }\n  } else {\n    save('NONE');\n  }\n}\n\nfunction save(value) {\n  chrome.storage.sync.set({\n    license: value\n  }, function () {\n    console.log('Value is set to ' + value);\n  });\n}\n\n/*****************************************************************************\n * Helper method for making authenticated requests\n *****************************************************************************/\n\n// Helper Util for making authenticated XHRs\nfunction xhrWithAuth(method, url, interactive, callback) {\n  var retry = true;\n  getToken();\n\n  function getToken() {\n    chrome.identity.getAuthToken({\n      interactive: interactive\n    }, function (token) {\n      if (chrome.runtime.lastError) {\n        callback(chrome.runtime.lastError);\n        return;\n      }\n      access_token = token;\n      requestStart();\n    });\n  }\n\n  function requestStart() {\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.setRequestHeader('Authorization', 'Bearer ' + access_token);\n    xhr.onload = requestComplete;\n    xhr.send();\n  }\n\n  function requestComplete() {\n    if (this.status == 401 && retry) {\n      retry = false;\n      chrome.identity.removeCachedAuthToken({\n        token: access_token\n      }, getToken);\n    } else {\n      callback(null, this.status, this.response);\n    }\n  }\n}\n\ninit();"]}