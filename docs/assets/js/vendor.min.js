"use strict";

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 */

(function (global, factory) {

	if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	// Can't do this because several apps including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	// Support: Firefox 18+
	//

	var deletedIds = [];

	var _slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};

	var version = "1.11.3",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([\da-z])/gi,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {
			return num != null ?

			// Return just the one element from the set
			num < 0 ? this[num + this.length] : this[num] :

			// Return all the elements in a clean array
			_slice.call(this);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function each(callback, args) {
			return jQuery.each(this, callback, args);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var src,
		    copyIsArray,
		    copy,
		    name,
		    options,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray || function (obj) {
			return jQuery.type(obj) === "array";
		},

		isWindow: function isWindow(obj) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},

		isNumeric: function isNumeric(obj) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		isPlainObject: function isPlainObject(obj) {
			var key;

			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			try {
				// Not own constructor property must be Object
				if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false;
				}
			} catch (e) {
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if (support.ownLast) {
				for (key in obj) {
					return hasOwn.call(obj, key);
				}
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for (key in obj) {}

			return key === undefined || hasOwn.call(obj, key);
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function globalEval(data) {
			if (data && jQuery.trim(data)) {
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				(window.execScript || function (data) {
					window["eval"].call(window, data);
				})(data);
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function nodeName(elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function each(obj, callback, args) {
			var value,
			    i = 0,
			    length = obj.length,
			    isArray = isArraylike(obj);

			if (args) {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.apply(obj[i], args);

						if (value === false) {
							break;
						}
					}
				}

				// A special, fast, case for the most common use of each
			} else {
				if (isArray) {
					for (; i < length; i++) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						value = callback.call(obj[i], i, obj[i]);

						if (value === false) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1, IE<9
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArraylike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			var len;

			if (arr) {
				if (indexOf) {
					return indexOf.call(arr, elem, i);
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

				for (; i < len; i++) {
					// Skip accessing in sparse arrays
					if (i in arr && arr[i] === elem) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			while (j < len) {
				first[i++] = second[j++];
			}

			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if (len !== len) {
				while (second[j] !== undefined) {
					first[i++] = second[j++];
				}
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var value,
			    i = 0,
			    length = elems.length,
			    isArray = isArraylike(elems),
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var args, proxy, tmp;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function now() {
			return +new Date();
		},

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArraylike(obj) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		if (obj.nodeType === 1 && length) {
			return true;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.2.0-pre
  * http://sizzlejs.com/
  *
  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2014-12-16
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace("w", "w#"),


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + characterEncoding + ")"),
			"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
			"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,
		    rescape = /'|\\/g,


		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		};

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

			if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
				setDocument(context);
			}

			context = context || document;
			results = results || [];
			nodeType = context.nodeType;

			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			if (!seed && documentIsHTML) {

				// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
				if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
					// Speed-up: Sizzle("#ID")
					if (m = match[1]) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document (jQuery #6963)
							if (elem && elem.parentNode) {
								// Handle the case where IE, Opera, and Webkit return items
								// by name instead of ID
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							// Context is not a document
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results;
							}
						}

						// Speed-up: Sizzle("TAG")
					} else if (match[2]) {
						push.apply(results, context.getElementsByTagName(selector));
						return results;

						// Speed-up: Sizzle(".CLASS")
					} else if ((m = match[3]) && support.getElementsByClassName) {
						push.apply(results, context.getElementsByClassName(m));
						return results;
					}
				}

				// QSA path
				if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
					nid = old = expando;
					newContext = context;
					newSelector = nodeType !== 1 && selector;

					// qSA works strangely on Element-rooted queries
					// We can work around this by specifying an extra ID on the root
					// and working up from there (Thanks to Andrew Dupont for the technique)
					// IE 8 doesn't work on object elements
					if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
						groups = tokenize(selector);

						if (old = context.getAttribute("id")) {
							nid = old.replace(rescape, "\\$&");
						} else {
							context.setAttribute("id", nid);
						}
						nid = "[id='" + nid + "'] ";

						i = groups.length;
						while (i--) {
							groups[i] = nid + toSelector(groups[i]);
						}
						newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						newSelector = groups.join(",");
					}

					if (newSelector) {
						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {} finally {
							if (!old) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */
		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}
				// release memory in IE
				div = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = attrs.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    parent,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// If no document and documentElement is available, return
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Set our document
			document = doc;
			docElem = doc.documentElement;
			parent = doc.defaultView;

			// Support: IE>8
			// If iframe document is assigned to "document" variable and if iframe has been reloaded,
			// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
			// IE6-8 do not support the defaultView property so parent will be undefined
			if (parent && parent !== parent.top) {
				// IE11 does not have attachEvent, so all must suffer
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			/* Support tests
   ---------------------------------------------------------------------- */
			documentIsHTML = !isXML(doc);

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (div) {
				div.appendChild(doc.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !doc.getElementsByName || !doc.getElementsByName(expando).length;
			});

			// ID find and filter
			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				// Support: IE6/7
				// getElementById is not reliable as a find shortcut
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See http://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(doc.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibing-combinator selector` fails
					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = doc.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (div) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(div, "div");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully does not implement inclusive descendent
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return doc;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    outerCache,
						    node,
						    diff,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[expando] || (parent[expando] = {});
								cache = outerCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										outerCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}

								// Use previously-cached element index if available
							} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
								diff = cache[1];

								// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

									if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
										// Cache the index of each encountered element
										if (useCache) {
											(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
										}

										if (node === elem) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": function enabled(elem) {
					return elem.disabled === false;
				},

				"disabled": function disabled(elem) {
					return elem.disabled === true;
				},

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    checkNonElements = base && dir === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});
							if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[dir] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is no seed and only one group
			if (match.length === 1) {

				// Take a shortcut and set the context if the root selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (div1) {
			// Should return 1, but returns 4 (following)
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;

	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				/* jshint -W018 */
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return jQuery.inArray(elem, qualifier) >= 0 !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret = [],
			    self = this,
			    len = self.length;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	    init = jQuery.fn.init = function (selector, context) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {
							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if (elem && elem.parentNode) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if (elem.id !== match[2]) {
							return rootjQuery.find(selector);
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || rootjQuery).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) :
			// Execute immediately if ready is not present
			selector(jQuery);
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.extend({
		dir: function dir(elem, _dir, until) {
			var matched = [],
			    cur = elem[_dir];

			while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
				if (cur.nodeType === 1) {
					matched.push(cur);
				}
				cur = cur[_dir];
			}
			return matched;
		},

		sibling: function sibling(n, elem) {
			var r = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n);
				}
			}

			return r;
		}
	});

	jQuery.fn.extend({
		has: function has(target) {
			var i,
			    targets = jQuery(target, this),
			    len = targets.length;

			return this.filter(function () {
				for (i = 0; i < len; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
					// Always skip document fragments
					if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// index in selector
			if (typeof elem === "string") {
				return jQuery.inArray(this[0], jQuery(elem));
			}

			// Locate the position of the desired element
			return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		do {
			cur = cur[dir];
		} while (cur && cur.nodeType !== 1);

		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents: function contents(elem) {
			return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var ret = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				ret = jQuery.filter(selector, ret);
			}

			if (this.length > 1) {
				// Remove duplicates
				if (!guaranteedUnique[name]) {
					ret = jQuery.unique(ret);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					ret = ret.reverse();
				}
			}

			return this.pushStack(ret);
		};
	});
	var rnotwhite = /\S+/g;

	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,

		// Last fire value (for non-forgettable lists)
		memory,

		// Flag to know if list was already fired
		_fired,

		// End of the loop when firing
		firingLength,

		// Index of currently firing callback (modified by remove if needed)
		firingIndex,

		// First callback to fire (used internally by add and fireWith)
		firingStart,

		// Actual callback list
		list = [],

		// Stack of fire calls for repeatable lists
		stack = !options.once && [],

		// Fire callbacks
		fire = function fire(data) {
			memory = options.memory && data;
			_fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift());
					}
				} else if (memory) {
					list = [];
				} else {
					self.disable();
				}
			}
		},

		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {
					// First, we save the current length
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && type !== "string") {
								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);
					// Do we need to add the callbacks to the
					// current firing batch?
					if (firing) {
						firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
					} else if (memory) {
						firingStart = start;
						fire(memory);
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function remove() {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);
							// Handle firing indexes
							if (firing) {
								if (index <= firingLength) {
									firingLength--;
								}
								if (index <= firingIndex) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
			},
			// Remove all callbacks from the list
			empty: function empty() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function disable() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function disabled() {
				return !list;
			},
			// Lock the list in its current state
			lock: function lock() {
				stack = undefined;
				if (!memory) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function locked() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (list && (!_fired || stack)) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					if (firing) {
						stack.push(args);
					} else {
						fire(args);
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [
			// action, add listener, listener list, final state
			["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function then() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var fn = jQuery.isFunction(fns[i]) && fns[i];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
								} else {
									newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Keep pipe for back-compat
			_promise.pipe = _promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {
						// state = [ resolved | rejected ]
						_state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ]
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(subordinate /* , ..., subordinateN */) {
			var i = 0,
			    resolveValues = _slice.call(arguments),
			    length = resolveValues.length,


			// the count of uncompleted subordinates
			remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


			// Update function for both resolve and progress values
			updateFunc = function updateFunc(i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (! --remaining) {
						deferred.resolveWith(contexts, values);
					}
				};
			},
			    progressValues,
			    progressContexts,
			    resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});

	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function (fn) {
		// Add the callback
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function holdReady(hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if (!document.body) {
				return setTimeout(jQuery.ready);
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	/**
  * Clean-up method for dom ready events
  */
	function detach() {
		if (document.addEventListener) {
			document.removeEventListener("DOMContentLoaded", completed, false);
			window.removeEventListener("load", completed, false);
		} else {
			document.detachEvent("onreadystatechange", completed);
			window.detachEvent("onload", completed);
		}
	}

	/**
  * The ready event handler and self cleanup method
  */
	function completed() {
		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if (document.readyState === "complete") {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout(jQuery.ready);

				// Standards-based browsers support DOMContentLoaded
			} else if (document.addEventListener) {
				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", completed, false);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", completed, false);

				// If IE event model is used
			} else {
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent("onreadystatechange", completed);

				// A fallback to window.onload, that will always work
				window.attachEvent("onload", completed);

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch (e) {}

				if (top && top.doScroll) {
					(function doScrollCheck() {
						if (!jQuery.isReady) {

							try {
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll("left");
							} catch (e) {
								return setTimeout(doScrollCheck, 50);
							}

							// detach all dom ready events
							detach();

							// and execute any waiting functions
							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise(obj);
	};

	var strundefined = typeof undefined === "undefined" ? "undefined" : _typeof(undefined);

	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for (i in jQuery(support)) {
		break;
	}
	support.ownLast = i !== "0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery(function () {
		// Minified: var a,b,c,d
		var val, div, body, container;

		body = document.getElementsByTagName("body")[0];
		if (!body || !body.style) {
			// Return for frameset docs that don't have a body
			return;
		}

		// Setup
		div = document.createElement("div");
		container = document.createElement("div");
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild(container).appendChild(div);

		if (_typeof(div.style.zoom) !== strundefined) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if (val) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild(container);
	});

	(function () {
		var div = document.createElement("div");

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch (e) {
				support.deleteExpando = false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();

	/**
  * Determines whether an object can have data
  */
	jQuery.acceptData = function (elem) {
		var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
		    nodeType = +elem.nodeType || 1;

		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ? false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
	};

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /([A-Z])/g;

	function dataAttr(elem, key, data) {
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {

			var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data(elem, key, data);
			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject(obj) {
		var name;
		for (name in obj) {

			// if the public data object is empty, the private is still empty
			if (name === "data" && jQuery.isEmptyObject(obj[name])) {
				continue;
			}
			if (name !== "toJSON") {
				return false;
			}
		}

		return true;
	}

	function internalData(elem, name, data, pvt /* Internal Use Only */) {
		if (!jQuery.acceptData(elem)) {
			return;
		}

		var ret,
		    thisCache,
		    internalKey = jQuery.expando,


		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,


		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,


		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
			return;
		}

		if (!id) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if (isNode) {
				id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if (!cache[id]) {
			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[id] = isNode ? {} : { toJSON: jQuery.noop };
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object" || typeof name === "function") {
			if (pvt) {
				cache[id] = jQuery.extend(cache[id], name);
			} else {
				cache[id].data = jQuery.extend(cache[id].data, name);
			}
		}

		thisCache = cache[id];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if (!pvt) {
			if (!thisCache.data) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if (data !== undefined) {
			thisCache[jQuery.camelCase(name)] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if (typeof name === "string") {

			// First Try to find as-is property data
			ret = thisCache[name];

			// Test for null|undefined property data
			if (ret == null) {

				// Try to find the camelCased property
				ret = thisCache[jQuery.camelCase(name)];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData(elem, name, pvt) {
		if (!jQuery.acceptData(elem)) {
			return;
		}

		var thisCache,
		    i,
		    isNode = elem.nodeType,


		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		    id = isNode ? elem[jQuery.expando] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if (!cache[id]) {
			return;
		}

		if (name) {

			thisCache = pvt ? cache[id] : cache[id].data;

			if (thisCache) {

				// Support array or space separated string names for data keys
				if (!jQuery.isArray(name)) {

					// try the string as a key before any manipulation
					if (name in thisCache) {
						name = [name];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase(name);
						if (name in thisCache) {
							name = [name];
						} else {
							name = name.split(" ");
						}
					}
				} else {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat(jQuery.map(name, jQuery.camelCase));
				}

				i = name.length;
				while (i--) {
					delete thisCache[name[i]];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if (!pvt) {
			delete cache[id].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if (!isEmptyDataObject(cache[id])) {
				return;
			}
		}

		// Destroy the cache
		if (isNode) {
			jQuery.cleanData([elem], true);

			// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
			/* jshint eqeqeq: false */
		} else if (support.deleteExpando || cache != cache.window) {
			/* jshint eqeqeq: true */
			delete cache[id];

			// When all else fails, null
		} else {
			cache[id] = null;
		}
	}

	jQuery.extend({
		cache: {},

		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,
			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function hasData(elem) {
			elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
			return !!elem && !isEmptyDataObject(elem);
		},

		data: function data(elem, name, _data) {
			return internalData(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			return internalRemoveData(elem, name);
		},

		// For internal use only.
		_data: function _data(elem, name, data) {
			return internalData(elem, name, data, true);
		},

		_removeData: function _removeData(elem, name) {
			return internalRemoveData(elem, name, true);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = jQuery.data(elem);

					if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						jQuery._data(elem, "parsedAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					jQuery.data(this, key);
				});
			}

			return arguments.length > 1 ?

			// Sets one value
			this.each(function () {
				jQuery.data(this, key, value);
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
		},

		removeData: function removeData(key) {
			return this.each(function () {
				jQuery.removeData(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = jQuery._data(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = jQuery._data(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return jQuery._data(elem, key) || jQuery._data(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					jQuery._removeData(elem, type + "queue");
					jQuery._removeData(elem, key);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = jQuery._data(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function isHidden(elem, el) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	};

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    length = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {
				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < length; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		return chainable ? elems :

		// Gets
		bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
	};
	var rcheckableType = /^(?:checkbox|radio)$/i;

	(function () {
		// Minified: var a,b,c
		var input = document.createElement("input"),
		    div = document.createElement("div"),
		    fragment = document.createDocumentFragment();

		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName("tbody").length;

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName("link").length;

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild(input);
		support.appendChecked = input.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild(div);
		div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE<9
		// Opera does not clone events (and typeof div.attachEvent === undefined).
		// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
		support.noCloneEvent = true;
		if (div.attachEvent) {
			div.attachEvent("onclick", function () {
				support.noCloneEvent = false;
			});

			div.cloneNode(true).click();
		}

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch (e) {
				support.deleteExpando = false;
			}
		}
	})();

	(function () {
		var i,
		    eventName,
		    div = document.createElement("div");

		// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
		for (i in { submit: true, change: true, focusin: true }) {
			eventName = "on" + i;

			if (!(support[i + "Bubbles"] = eventName in window)) {
				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute(eventName, "t");
				support[i + "Bubbles"] = div.attributes[eventName].expando === false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();

	var rformElems = /^(?:input|select|textarea)$/i,
	    rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {
			var tmp,
			    events,
			    t,
			    handleObjIn,
			    special,
			    eventHandle,
			    handleObj,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = jQuery._data(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return (typeof jQuery === "undefined" ? "undefined" : _typeof(jQuery)) !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
				};
				// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						// Bind the global event handler to the element
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
						} else if (elem.attachEvent) {
							elem.attachEvent("on" + type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {
			var j,
			    handleObj,
			    tmp,
			    origCount,
			    t,
			    events,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = jQuery.hasData(elem) && jQuery._data(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData(elem, "events");
			}
		},

		trigger: function trigger(event, data, elem, onlyHandlers) {
			var handle,
			    ontype,
			    cur,
			    bubbleType,
			    special,
			    tmp,
			    i,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") >= 0) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && jQuery.acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && elem[type] && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[type]();
						} catch (e) {
							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function dispatch(event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event);

			var i,
			    ret,
			    handleObj,
			    matched,
			    j,
			    handlerQueue = [],
			    args = _slice.call(arguments),
			    handlers = (jQuery._data(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var sel,
			    handleObj,
			    matches,
			    i,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

				/* jshint eqeqeq: false */
				for (; cur != this; cur = cur.parentNode || this) {
					/* jshint eqeqeq: true */

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		fix: function fix(event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i,
			    prop,
			    copy,
			    type = event.type,
			    originalEvent = event,
			    fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			// Support: IE<9
			// Fix target property (#1925)
			if (!event.target) {
				event.target = originalEvent.srcElement || document;
			}

			// Support: Chrome 23+, Safari?
			// Target should not be a text node (#504, #13143)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function filter(event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function filter(event, original) {
				var body,
				    eventDoc,
				    doc,
				    button = original.button,
				    fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add relatedTarget, if necessary
				if (!event.relatedTarget && fromElement) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}

				return event;
			}
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						try {
							this.focus();
							return false;
						} catch (e) {
							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function simulate(type, elem, event, bubble) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true,
				originalEvent: {}
			});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	} : function (elem, type, handle) {
		var name = "on" + type;

		if (elem.detachEvent) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if (_typeof(elem[name]) === strundefined) {
				elem[name] = null;
			}

			elem.detachEvent(name, handle);
		}
	};

	jQuery.Event = function (src, props) {
		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
			// Support: IE < 9, Android < 4.0
			src.returnValue === false ? returnTrue : returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if (!e) {
				return;
			}

			// If preventDefault exists, run it on the original event
			if (e.preventDefault) {
				e.preventDefault();

				// Support: IE
				// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;
			if (!e) {
				return;
			}
			// If stopPropagation exists, run it on the original event
			if (e.stopPropagation) {
				e.stopPropagation();
			}

			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && e.stopImmediatePropagation) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// IE submit delegation
	if (!support.submitBubbles) {

		jQuery.event.special.submit = {
			setup: function setup() {
				// Only need this for delegated form submit events
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add(this, "click._submit keypress._submit", function (e) {
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
					    form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
					if (form && !jQuery._data(form, "submitBubbles")) {
						jQuery.event.add(form, "submit._submit", function (event) {
							event._submit_bubble = true;
						});
						jQuery._data(form, "submitBubbles", true);
					}
				});
				// return undefined since we don't need an event listener
			},

			postDispatch: function postDispatch(event) {
				// If form was submitted by the user, bubble the event up the tree
				if (event._submit_bubble) {
					delete event._submit_bubble;
					if (this.parentNode && !event.isTrigger) {
						jQuery.event.simulate("submit", this.parentNode, event, true);
					}
				}
			},

			teardown: function teardown() {
				// Only need this for delegated form submit events
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove(this, "._submit");
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if (!support.changeBubbles) {

		jQuery.event.special.change = {

			setup: function setup() {

				if (rformElems.test(this.nodeName)) {
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if (this.type === "checkbox" || this.type === "radio") {
						jQuery.event.add(this, "propertychange._change", function (event) {
							if (event.originalEvent.propertyName === "checked") {
								this._just_changed = true;
							}
						});
						jQuery.event.add(this, "click._change", function (event) {
							if (this._just_changed && !event.isTrigger) {
								this._just_changed = false;
							}
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate("change", this, event, true);
						});
					}
					return false;
				}
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add(this, "beforeactivate._change", function (e) {
					var elem = e.target;

					if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
						jQuery.event.add(elem, "change._change", function (event) {
							if (this.parentNode && !event.isSimulated && !event.isTrigger) {
								jQuery.event.simulate("change", this.parentNode, event, true);
							}
						});
						jQuery._data(elem, "changeBubbles", true);
					}
				});
			},

			handle: function handle(event) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
					return event.handleObj.handler.apply(this, arguments);
				}
			},

			teardown: function teardown() {
				jQuery.event.remove(this, "._change");

				return !rformElems.test(this.nodeName);
			}
		};
	}

	// Create "bubbling" focus and blur events
	if (!support.focusinBubbles) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = jQuery._data(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					jQuery._data(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = jQuery._data(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						jQuery._removeData(doc, fix);
					} else {
						jQuery._data(doc, fix, attaches);
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function on(types, selector, data, fn, /*INTERNAL*/one) {
			var type, origFn;

			// Types can be a map of types/handlers
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				// ( types-Object, selector, data )
				if (typeof selector !== "string") {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}

			if (data == null && fn == null) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {
					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function one(types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {
				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	function createSafeFragment(document) {
		var list = nodeNames.split("|"),
		    safeFrag = document.createDocumentFragment();

		if (safeFrag.createElement) {
			while (list.length) {
				safeFrag.createElement(list.pop());
			}
		}
		return safeFrag;
	}

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	    rleadingWhitespace = /^\s+/,
	    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	    rtagName = /<([\w:]+)/,
	    rtbody = /<tbody/i,
	    rhtml = /<|&#?\w+;/,
	    rnoInnerhtml = /<(?:script|style|link)/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptType = /^$|\/(?:java|ecma)script/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,


	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [1, "<select multiple='multiple'>", "</select>"],
		legend: [1, "<fieldset>", "</fieldset>"],
		area: [1, "<map>", "</map>"],
		param: [1, "<object>", "</object>"],
		thead: [1, "<table>", "</table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
	},
	    safeFragment = createSafeFragment(document),
	    fragmentDiv = safeFragment.appendChild(document.createElement("div"));

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {
		var elems,
		    elem,
		    i = 0,
		    found = _typeof(context.getElementsByTagName) !== strundefined ? context.getElementsByTagName(tag || "*") : _typeof(context.querySelectorAll) !== strundefined ? context.querySelectorAll(tag || "*") : undefined;

		if (!found) {
			for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
				if (!tag || jQuery.nodeName(elem, tag)) {
					found.push(elem);
				} else {
					jQuery.merge(found, getAll(elem, tag));
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
	}

	// Used in buildFragment, fixes the defaultChecked property
	function fixDefaultChecked(elem) {
		if (rcheckableType.test(elem.type)) {
			elem.defaultChecked = elem.checked;
		}
	}

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);
		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}
		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var elem,
		    i = 0;
		for (; (elem = elems[i]) != null; i++) {
			jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
		}
	}

	function cloneCopyEvent(src, dest) {

		if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
			return;
		}

		var type,
		    i,
		    l,
		    oldData = jQuery._data(src),
		    curData = jQuery._data(dest, oldData),
		    events = oldData.events;

		if (events) {
			delete curData.handle;
			curData.events = {};

			for (type in events) {
				for (i = 0, l = events[type].length; i < l; i++) {
					jQuery.event.add(dest, type, events[type][i]);
				}
			}
		}

		// make the cloned public data object a copy from the original
		if (curData.data) {
			curData.data = jQuery.extend({}, curData.data);
		}
	}

	function fixCloneNodeIssues(src, dest) {
		var nodeName, e, data;

		// We do not need to do anything for non-Elements
		if (dest.nodeType !== 1) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if (!support.noCloneEvent && dest[jQuery.expando]) {
			data = jQuery._data(dest);

			for (e in data.events) {
				jQuery.removeEvent(dest, e, data.handle);
			}

			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute(jQuery.expando);
		}

		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if (nodeName === "script" && dest.text !== src.text) {
			disableScript(dest).text = src.text;
			restoreScript(dest);

			// IE6-10 improperly clones children of object elements using classid.
			// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if (nodeName === "object") {
			if (dest.parentNode) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
				dest.innerHTML = src.innerHTML;
			}
		} else if (nodeName === "input" && rcheckableType.test(src.type)) {
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if (dest.value !== src.value) {
				dest.value = src.value;
			}

			// IE6-8 fails to return the selected option to the default selected
			// state when cloning options
		} else if (nodeName === "option") {
			dest.defaultSelected = dest.selected = src.defaultSelected;

			// IE6-8 fails to set the defaultValue to the correct value when
			// cloning other types of input fields
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var destElements,
			    node,
			    clone,
			    i,
			    srcElements,
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
				clone = elem.cloneNode(true);

				// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
			}

			if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				// Fix all IE cloning issues
				for (i = 0; (node = srcElements[i]) != null; ++i) {
					// Ensure that the destination node is not null; Fixes #9587
					if (destElements[i]) {
						fixCloneNodeIssues(node, destElements[i]);
					}
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0; (node = srcElements[i]) != null; i++) {
						cloneCopyEvent(node, destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			destElements = srcElements = node = null;

			// Return the cloned set
			return clone;
		},

		buildFragment: function buildFragment(elems, context, scripts, selection) {
			var j,
			    elem,
			    contains,
			    tmp,
			    tag,
			    tbody,
			    wrap,
			    l = elems.length,


			// Ensure a safe fragment
			safe = createSafeFragment(context),
			    nodes = [],
			    i = 0;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || safe.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;

						tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Manually add leading whitespace removed by IE
						if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
							nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
						}

						// Remove IE's autoinserted <tbody> from table fragments
						if (!support.tbody) {

							// String was a <table>, *may* have spurious <tbody>
							elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;

							j = elem && elem.childNodes.length;
							while (j--) {
								if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
									elem.removeChild(tbody);
								}
							}
						}

						jQuery.merge(nodes, tmp.childNodes);

						// Fix #12392 for WebKit and IE > 9
						tmp.textContent = "";

						// Fix #12392 for oldIE
						while (tmp.firstChild) {
							tmp.removeChild(tmp.firstChild);
						}

						// Remember the top-level container for proper cleanup
						tmp = safe.lastChild;
					}
				}
			}

			// Fix #11356: Clear elements from fragment
			if (tmp) {
				safe.removeChild(tmp);
			}

			// Reset defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			if (!support.appendChecked) {
				jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
			}

			i = 0;
			while (elem = nodes[i++]) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if (selection && jQuery.inArray(elem, selection) !== -1) {
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(safe.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			tmp = null;

			return safe;
		},

		cleanData: function cleanData(elems, /* internal */acceptData) {
			var elem,
			    type,
			    id,
			    data,
			    i = 0,
			    internalKey = jQuery.expando,
			    cache = jQuery.cache,
			    deleteExpando = support.deleteExpando,
			    special = jQuery.event.special;

			for (; (elem = elems[i]) != null; i++) {
				if (acceptData || jQuery.acceptData(elem)) {

					id = elem[internalKey];
					data = id && cache[id];

					if (data) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if (cache[id]) {

							delete cache[id];

							// IE does not allow us to delete expando properties from nodes,
							// nor does it have a removeAttribute function on Document nodes;
							// we must handle all of these cases
							if (deleteExpando) {
								delete elem[internalKey];
							} else if (_typeof(elem.removeAttribute) !== strundefined) {
								elem.removeAttribute(internalKey);
							} else {
								elem[internalKey] = null;
							}

							deletedIds.push(id);
						}
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
			}, null, value, arguments.length);
		},

		append: function append() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return this.domManip(arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return this.domManip(arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		remove: function remove(selector, keepData /* Internal Use Only */) {
			var elem,
			    elems = selector ? jQuery.filter(selector, this) : this,
			    i = 0;

			for (; (elem = elems[i]) != null; i++) {

				if (!keepData && elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem));
				}

				if (elem.parentNode) {
					if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
						setGlobalEval(getAll(elem, "script"));
					}
					elem.parentNode.removeChild(elem);
				}
			}

			return this;
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				// Remove element nodes and prevent memory leaks
				if (elem.nodeType === 1) {
					jQuery.cleanData(getAll(elem, false));
				}

				// Remove any remaining nodes
				while (elem.firstChild) {
					elem.removeChild(elem.firstChild);
				}

				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if (elem.options && jQuery.nodeName(elem, "select")) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined) {
					return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = value.replace(rxhtmlTag, "<$1></$2>");

					try {
						for (; i < l; i++) {
							// Remove element nodes and prevent memory leaks
							elem = this[i] || {};
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var arg = arguments[0];

			// Make the changes, replacing each context element with the new content
			this.domManip(arguments, function (elem) {
				arg = this.parentNode;

				jQuery.cleanData(getAll(this));

				if (arg) {
					arg.replaceChild(elem, this);
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function detach(selector) {
			return this.remove(selector, true);
		},

		domManip: function domManip(args, callback) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var first,
			    node,
			    hasScripts,
			    scripts,
			    doc,
			    fragment,
			    i = 0,
			    l = this.length,
			    set = this,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return this.each(function (index) {
					var self = set.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					self.domManip(args, callback);
				});
			}

			if (l) {
				fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				if (first) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(this[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {
									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
								}
							}
						}
					}

					// Fix #11809: Avoid leaking memory
					fragment = first = null;
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    i = 0,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});

	var iframe,
	    elemdisplay = {};

	/**
  * Retrieve the actual display of a element
  * @param {String} name nodeName of the element
  * @param {Object} doc Document object
  */
	// Called only from within defaultDisplay
	function actualDisplay(name, doc) {
		var style,
		    elem = jQuery(doc.createElement(name)).appendTo(doc.body),


		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?

		// Use of this method is a temporary fix (more like optmization) until something better comes along,
		// since it was removed from specification and supported only in FF
		style.display : jQuery.css(elem[0], "display");

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
  * Try to determine the default display value of an element
  * @param {String} nodeName
  */
	function defaultDisplay(nodeName) {
		var doc = document,
		    display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			// If the simple way fails, read from inside an iframe
			if (display === "none" || !display) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[nodeName] = display;
		}

		return display;
	}

	(function () {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function () {
			if (shrinkWrapBlocksVal != null) {
				return shrinkWrapBlocksVal;
			}

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			// Minified: var b,c,d
			var div, body, container;

			body = document.getElementsByTagName("body")[0];
			if (!body || !body.style) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement("div");
			container = document.createElement("div");
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild(container).appendChild(div);

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if (_typeof(div.style.zoom) !== strundefined) {
				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
				div.appendChild(document.createElement("div")).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild(container);

			return shrinkWrapBlocksVal;
		};
	})();
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles,
	    curCSS,
	    rposition = /^(top|right|bottom|left)$/;

	if (window.getComputedStyle) {
		getStyles = function getStyles(elem) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if (elem.ownerDocument.defaultView.opener) {
				return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
			}

			return window.getComputedStyle(elem, null);
		};

		curCSS = function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

			if (computed) {

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
				if (rnumnonpx.test(ret) && rmargin.test(name)) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ? ret : ret + "";
		};
	} else if (document.documentElement.currentStyle) {
		getStyles = function getStyles(elem) {
			return elem.currentStyle;
		};

		curCSS = function curCSS(elem, name, computed) {
			var left,
			    rs,
			    rsLeft,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);
			ret = computed ? computed[name] : undefined;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if (ret == null && style && style[name]) {
				ret = style[name];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are proportional to the parent element instead
			// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
			if (rnumnonpx.test(ret) && !rposition.test(name)) {

				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				// Put in the new values to get a computed value out
				if (rsLeft) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if (rsLeft) {
					rs.left = rsLeft;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ? ret : ret + "" || "auto";
		};
	}

	function addGetHookIf(conditionFn, hookFn) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				var condition = conditionFn();

				if (condition == null) {
					// The test was not ready at this point; screw the hook this time
					// but check again when needed next time.
					return;
				}

				if (condition) {
					// Hook not needed (or it's not possible to use it due to missing dependency),
					// remove it.
					// Since there are no other hooks for marginRight, remove the whole object.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.

				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	(function () {
		// Minified: var b,c,d,e,f,g, h,i
		var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;

		// Setup
		div = document.createElement("div");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[0];
		style = a && a.style;

		// Finish early in limited (non-browser) environments
		if (!style) {
			return;
		}

		style.cssText = "float:left;opacity:.5";

		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = style.opacity === "0.5";

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";

		jQuery.extend(support, {
			reliableHiddenOffsets: function reliableHiddenOffsets() {
				if (reliableHiddenOffsetsVal == null) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function boxSizingReliable() {
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelPosition: function pixelPosition() {
				if (pixelPositionVal == null) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			// Support: Android 2.3
			reliableMarginRight: function reliableMarginRight() {
				if (reliableMarginRightVal == null) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			}
		});

		function computeStyleTests() {
			// Minified: var b,c,d,j
			var div, body, container, contents;

			body = document.getElementsByTagName("body")[0];
			if (!body || !body.style) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement("div");
			container = document.createElement("div");
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild(container).appendChild(div);

			div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";

			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = false;
			reliableMarginRightVal = true;

			// Check for getComputedStyle so that this code is not run in IE<9.
			if (window.getComputedStyle) {
				pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%";
				boxSizingReliableVal = (window.getComputedStyle(div, null) || { width: "4px" }).width === "4px";

				// Support: Android 2.3
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild(document.createElement("div"));

				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);

				div.removeChild(contents);
			}

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName("td");
			contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
			if (reliableHiddenOffsetsVal) {
				contents[0].style.display = "";
				contents[1].style.display = "none";
				reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
			}

			body.removeChild(container);
		}
	})();

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function (elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	var ralpha = /alpha\([^)]*\)/i,
	    ropacity = /opacity\s*=\s*([^)]*)/,


	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(style, name) {

		// shortcut for names that are not vendor prefixed
		if (name in style) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
		    origName = name,
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}

		return origName;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    hidden,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = jQuery._data(elem, "olddisplay");
			display = elem.style.display;
			if (show) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			} else {
				hidden = isHidden(elem);

				if (display && display !== "none" || !hidden) {
					jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,
		    val = 0;

		for (; i < 4; i += 2) {
			// both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {
				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// at this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// at this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
		    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		    styles = getStyles(elem),
		    isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {
						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {
			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// convert relative number strings (+= or -=) to relative numbers. #7345
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}

				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight (for every problematic property) identical functions
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[name] = value;
					} catch (e) {}
				}
			} else {
				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var num,
			    val,
			    hooks,
			    origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			//convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var styles = extra && getStyles(elem);
				return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
			}
		};
	});

	if (!support.opacity) {
		jQuery.cssHooks.opacity = {
			get: function get(elem, computed) {
				// IE uses filters for opacity
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
			},

			set: function set(elem, value) {
				var style = elem.style,
				    currentStyle = elem.currentStyle,
				    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
				    filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute("filter");

					// if there is no filter style applied in a css rule or unset inline opacity, we are done
					if (value === "" || currentStyle && !currentStyle.filter) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
		if (computed) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css(tween.elem, tween.prop, "");
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    timerId,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	    rrun = /queueHooks$/,
	    animationPrefilters = [defaultPrefilter],
	    tweeners = {
		"*": [function (prop, value) {
			var tween = this.createTween(prop, value),
			    target = tween.cur(),
			    parts = rfxnum.exec(value),
			    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
			    scale = 1,
			    maxIterations = 20;

			if (start && start[3] !== unit) {
				// Trust units reported by jQuery.css
				unit = unit || start[3];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style(tween.elem, prop, start + unit);

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
			}

			// Update tween properties
			if (parts) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
			}

			return tween;
		}]
	};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    attrs = { height: type },
		    i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (tweeners[prop] || []).concat(tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		/* jshint validthis: true */
		var prop,
		    value,
		    toggle,
		    tween,
		    hooks,
		    oldfire,
		    display,
		    checkDisplay,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHidden(elem),
		    dataShow = jQuery._data(elem, "fxshow");

		// handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css(elem, "display");

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			if (!support.shrinkWrapBlocks()) {
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}
		}

		// show/hide pass
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

				// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data(elem, "fxshow", {});
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;
				jQuery._removeData(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

			// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = animationPrefilters.length,
		    deferred = jQuery.Deferred().always(function () {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

			// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, { specialEasing: {} }, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,

				// if we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// resolve when we played the last frame
				// otherwise, reject
				if (gotoEnd) {
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		// attach callbacks from options
		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {
		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.split(" ");
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				tweeners[prop] = tweeners[prop] || [];
				tweeners[prop].unshift(callback);
			}
		},

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				animationPrefilters.unshift(callback);
			} else {
				animationPrefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || jQuery._data(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = jQuery._data(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = jQuery._data(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    timers = jQuery.timers,
		    i = 0;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];
			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = setTimeout(next, time);
			hooks.stop = function () {
				clearTimeout(timeout);
			};
		});
	};

	(function () {
		// Minified: var a,b,c,d,e
		var input, div, select, a, opt;

		// Setup
		div = document.createElement("div");
		div.setAttribute("className", "t");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[0];

		// First batch of tests.
		select = document.createElement("select");
		opt = select.appendChild(document.createElement("option"));
		input = div.getElementsByTagName("input")[0];

		a.style.cssText = "top:1px";

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test(a.getAttribute("style"));

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute("href") === "/a";

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;

		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement("form").enctype;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement("input");
		input.setAttribute("value", "");
		support.input = input.getAttribute("value") === "";

		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";
	})();

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {
					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one" || index < 0,
					    values = one ? null : [],
					    max = one ? index + 1 : options.length,
					    i = index < 0 ? max : one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// oldIE doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) && (
						// Don't return options that are disabled or in a disabled optgroup
						support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {

							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;
							} catch (_) {

								// Will be executed only in IE6
								option.scrollHeight;
							}
						} else {
							option.selected = false;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (jQuery.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				// Support: Webkit
				// "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	var nodeHook,
	    boolHook,
	    attrHandle = jQuery.expr.attrHandle,
	    ruseDefault = /^(?:checked|selected)$/i,
	    getSetAttribute = support.getSetAttribute,
	    getSetInput = support.input;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var hooks,
			    ret,
			    nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (_typeof(elem.getAttribute) === strundefined) {
				return jQuery.prop(elem, name, value);
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
			}

			if (value !== undefined) {

				if (value === null) {
					jQuery.removeAttr(elem, name);
				} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				} else {
					elem.setAttribute(name, value + "");
					return value;
				}
			} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			} else {
				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    propName,
			    i = 0,
			    attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					propName = jQuery.propFix[name] || name;

					// Boolean attributes get special treatment (#10870)
					if (jQuery.expr.match.bool.test(name)) {
						// Set corresponding property to false
						if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
							elem[propName] = false;
							// Support: IE<9
							// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
						}

						// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr(elem, name, "");
					}

					elem.removeAttribute(getSetAttribute ? name : propName);
				}
			}
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hook for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
				// IE<8 needs the *property* name
				elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);

				// Use defaultChecked and defaultSelected for oldIE
			} else {
				elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
			}

			return name;
		}
	};

	// Retrieve booleans specially
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {

		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
				attrHandle[name] = handle;
			}
			return ret;
		} : function (elem, name, isXML) {
			if (!isXML) {
				return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
			}
		};
	});

	// fix oldIE attroperties
	if (!getSetInput || !getSetAttribute) {
		jQuery.attrHooks.value = {
			set: function set(elem, value, name) {
				if (jQuery.nodeName(elem, "input")) {
					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {
					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set(elem, value, name);
				}
			}
		};
	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if (!getSetAttribute) {

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function set(elem, value, name) {
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode(name);
				if (!ret) {
					elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
				}

				ret.value = value += "";

				// Break association with cloned elements by also using setAttribute (#9646)
				if (name === "value" || value === elem.getAttribute(name)) {
					return value;
				}
			}
		};

		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {
			var ret;
			if (!isXML) {
				return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
			}
		};

		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function get(elem, name) {
				var ret = elem.getAttributeNode(name);
				if (ret && ret.specified) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function set(elem, value, name) {
				nodeHook.set(elem, value === "" ? false : value, name);
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each(["width", "height"], function (i, name) {
			jQuery.attrHooks[name] = {
				set: function set(elem, value) {
					if (value === "") {
						elem.setAttribute(name, "auto");
						return value;
					}
				}
			};
		});
	}

	if (!support.style) {
		jQuery.attrHooks.style = {
			get: function get(elem) {
				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case senstitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function set(elem, value) {
				return elem.style.cssText = value + "";
			}
		};
	}

	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			name = jQuery.propFix[name] || name;
			return this.each(function () {
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[name] = undefined;
					delete this[name];
				} catch (e) {}
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    notxml,
			    nType = elem.nodeType;

			// don't get/set properties on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			if (notxml) {
				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
			} else {
				return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
			}
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
				}
			}
		}
	});

	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if (!support.hrefNormalized) {
		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each(["href", "src"], function (i, name) {
			jQuery.propHooks[name] = {
				get: function get(elem) {
					return elem.getAttribute(name, 4);
				}
			};
		});
	}

	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {
				var parent = elem.parentNode;

				if (parent) {
					parent.selectedIndex;

					// Make sure that it also works with optgroups, see #5701
					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// IE6/7 call enctype encoding
	if (!support.enctype) {
		jQuery.propFix.enctype = "encoding";
	}

	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    i = 0,
			    len = this.length,
			    proceed = typeof value === "string" && value;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}

			if (proceed) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    clazz,
			    j,
			    finalValue,
			    i = 0,
			    len = this.length,
			    proceed = arguments.length === 0 || typeof value === "string" && value;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if (proceed) {
				classes = (value || "").match(rnotwhite) || [];

				for (; i < len; i++) {
					elem = this[i];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") >= 0) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim(cur) : "";
						if (elem.className !== finalValue) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
				});
			}

			return this.each(function () {
				if (type === "string") {
					// toggle individual class names
					var className,
					    i = 0,
					    self = jQuery(this),
					    classNames = value.match(rnotwhite) || [];

					while (className = classNames[i++]) {
						// check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (type === strundefined || type === "boolean") {
					if (this.className) {
						// store className if set
						jQuery._data(this, "__className__", this.className);
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className = " " + selector + " ",
			    i = 0,
			    l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true;
				}
			}

			return false;
		}
	});

	// Return jQuery for attributes-only inclusion


	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		},

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	var nonce = jQuery.now();

	var rquery = /\?/;

	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function (data) {
		// Attempt to parse using the native JSON parser first
		if (window.JSON && window.JSON.parse) {
			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse(data + "");
		}

		var requireNonComma,
		    depth = null,
		    str = jQuery.trim(data + "");

		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {

			// Force termination if we see a misplaced comma
			if (requireNonComma && comma) {
				depth = 0;
			}

			// Perform no more replacements after returning to outermost depth
			if (depth === 0) {
				return token;
			}

			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;

			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;

			// Remove this token
			return "";
		})) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
	};

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml, tmp;
		if (!data || typeof data !== "string") {
			return null;
		}
		try {
			if (window.DOMParser) {
				// Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString(data, "text/xml");
			} else {
				// IE
				xml = new ActiveXObject("Microsoft.XMLDOM");
				xml.async = "false";
				xml.loadXML(data);
			}
		} catch (e) {
			xml = undefined;
		}
		if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var
	// Document location
	ajaxLocParts,
	    ajaxLocation,
	    rhash = /#.*$/,
	    rts = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
	    // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,
	    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch (e) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement("a");
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	// Segment location into parts
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {
				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {
					// Prepend if requested
					if (dataType.charAt(0) === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var deep,
		    key,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {
		var firstDataType,
		    ct,
		    finalDataType,
		    type,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {
			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var // Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,


			// To know if global events are to be dispatched
			fireGlobals,
			    transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup({}, options),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),

			// Status-dependent callbacks
			_statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					var lname = name.toLowerCase();
					if (!state) {
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (state < 2) {
							for (code in map) {
								// Lazy-add the new callback in a way that preserves old ones
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if (s.cache === false) {
					s.url = rts.test(cacheURL) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace(rts, "$1_=" + nonce++) :

					// Otherwise add one to the end
					cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}
				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);
						// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			// shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {
				// The elements to wrap the target around
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstChild && elem.firstChild.nodeType === 1) {
						elem = elem.firstChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap() {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});

	jQuery.expr.filters.hidden = function (elem) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
	};

	jQuery.expr.filters.visible = function (elem) {
		return !jQuery.expr.filters.hidden(elem);
	};

	var r20 = /%20/g,
	    rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {
			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					// Treat each array item as a scalar.
					add(prefix, v);
				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {
			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {
			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, value) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function () {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

		// Support: IE7-8
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		/^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

	var xhrId = 0,
	    xhrCallbacks = {},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if (window.attachEvent) {
		window.attachEvent("onunload", function () {
			for (var key in xhrCallbacks) {
				xhrCallbacks[key](undefined, true);
			}
		});
	}

	// Determine support properties
	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	xhrSupported = support.ajax = !!xhrSupported;

	// Create transport if the browser can provide an xhr
	if (xhrSupported) {

		jQuery.ajaxTransport(function (options) {
			// Cross domain only allowed if supported through XMLHttpRequest
			if (!options.crossDomain || support.cors) {

				var _callback;

				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr(),
						    id = ++xhrId;

						// Open the socket
						xhr.open(options.type, options.url, options.async, options.username, options.password);

						// Apply custom fields if provided
						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for (i in headers) {
							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if (headers[i] !== undefined) {
								xhr.setRequestHeader(i, headers[i] + "");
							}
						}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send(options.hasContent && options.data || null);

						// Listener
						_callback = function callback(_, isAbort) {
							var status, statusText, responses;

							// Was never called and is aborted or complete
							if (_callback && (isAbort || xhr.readyState === 4)) {
								// Clean up
								delete xhrCallbacks[id];
								_callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								// Abort manually if needed
								if (isAbort) {
									if (xhr.readyState !== 4) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if (typeof xhr.responseText === "string") {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch (e) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if (!status && options.isLocal && !options.crossDomain) {
										status = responses.text ? 200 : 404;
										// IE - #1450: sometimes returns 1223 when it should be 204
									} else if (status === 1223) {
										status = 204;
									}
								}
							}

							// Call complete if needed
							if (responses) {
								complete(status, statusText, responses, xhr.getAllResponseHeaders());
							}
						};

						if (!options.async) {
							// if we're in sync mode we fire the callback
							_callback();
						} else if (xhr.readyState === 4) {
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							setTimeout(_callback);
						} else {
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[id] = _callback;
						}
					},

					abort: function abort() {
						if (_callback) {
							_callback(undefined, true);
						}
					}
				};
			}
		});
	}

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP");
		} catch (e) {}
	}

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and global
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
			s.global = false;
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {

			var script,
			    head = document.head || jQuery("head")[0] || document.documentElement;

			return {

				send: function send(_, callback) {

					script = document.createElement("script");

					script.async = true;

					if (s.scriptCharset) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function (_, isAbort) {

						if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if (script.parentNode) {
								script.parentNode.removeChild(script);
							}

							// Dereference the script
							script = null;

							// Callback if not abort
							if (!isAbort) {
								callback(200, "success");
							}
						}
					};

					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore(script, head.firstChild);
				},

				abort: function abort() {
					if (script) {
						script.onload(undefined, true);
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {
				// Restore preexisting value
				window[callbackName] = overwritten;

				// Save back as free
				if (s[callbackName]) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
		    scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = jQuery.buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector,
		    response,
		    type,
		    self = this,
		    off = url.indexOf(" ");

		if (off >= 0) {
			selector = jQuery.trim(url.slice(off, url.length));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);
			}).complete(callback && function (jqXHR, status) {
				self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	var docElem = window.document.documentElement;

	/**
  * Gets a window from an element
  */
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
	}

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;

			// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var docElem,
			    win,
			    box = { top: 0, left: 0 },
			    elem = this[0],
			    doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if (_typeof(elem.getBoundingClientRect) !== strundefined) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow(doc);
			return {
				top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
				left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    parentOffset = { top: 0, left: 0 },
			    elem = this[0];

			// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {
				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent || docElem;

				while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = /Y/.test(prop);

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length, null);
		};
	});

	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});

	// The number of elements contained in the matched element set
	jQuery.fn.size = function () {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ((typeof noGlobal === "undefined" ? "undefined" : _typeof(noGlobal)) === strundefined) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});

!function (t, e) {
	"function" == typeof define && define.amd ? define(e) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = e(require, exports, module) : t.Tether = e();
}(undefined, function (t, e, o) {
	"use strict";
	function d(t, e) {
		if ("undefined" != typeof t.classList) return t.classList.contains(e);var o = u(t);return new RegExp("(^| )" + e + "( |$)", "gi").test(o);
	}function u(t) {
		return t.className instanceof SVGAnimatedString ? t.className.baseVal : t.className;
	}function i(t, e) {
		if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
	}function g(t, e) {
		var o = arguments.length <= 2 || void 0 === arguments[2] ? 1 : arguments[2];return t + o >= e && e >= t - o;
	}function m() {
		return "undefined" != typeof performance && "undefined" != typeof performance.now ? performance.now() : +new Date();
	}function v() {
		for (var t = { top: 0, left: 0 }, e = arguments.length, o = Array(e), i = 0; e > i; i++) {
			o[i] = arguments[i];
		}return o.forEach(function (e) {
			var o = e.top,
			    i = e.left;"string" == typeof o && (o = parseFloat(o, 10)), "string" == typeof i && (i = parseFloat(i, 10)), t.top += o, t.left += i;
		}), t;
	}function y(t, e) {
		return "string" == typeof t.left && -1 !== t.left.indexOf("%") && (t.left = parseFloat(t.left, 10) / 100 * e.width), "string" == typeof t.top && -1 !== t.top.indexOf("%") && (t.top = parseFloat(t.top, 10) / 100 * e.height), t;
	}function b(t, e) {
		return "scrollParent" === e ? e = t.scrollParents[0] : "window" === e && (e = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset]), e === document && (e = e.documentElement), "undefined" != typeof e.nodeType && !function () {
			var t = r(e),
			    o = t,
			    i = getComputedStyle(e);e = [o.left, o.top, t.width + o.left, t.height + o.top], U.forEach(function (t, o) {
				t = t[0].toUpperCase() + t.substr(1), "Top" === t || "Left" === t ? e[o] += parseFloat(i["border" + t + "Width"]) : e[o] -= parseFloat(i["border" + t + "Width"]);
			});
		}(), e;
	}var w = function () {
		function t(t, e) {
			for (var o = 0; o < e.length; o++) {
				var i = e[o];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
			}
		}return function (e, o, i) {
			return o && t(e.prototype, o), i && t(e, i), e;
		};
	}(),
	    C = void 0;"undefined" == typeof C && (C = { modules: [] });var O = function () {
		var t = 0;return function () {
			return ++t;
		};
	}(),
	    E = {},
	    x = function x(t) {
		var e = t._tetherZeroElement;"undefined" == typeof e && (e = t.createElement("div"), e.setAttribute("data-tether-id", O()), f(e.style, { top: 0, left: 0, position: "absolute" }), t.body.appendChild(e), t._tetherZeroElement = e);var o = e.getAttribute("data-tether-id");if ("undefined" == typeof E[o]) {
			E[o] = {};var i = e.getBoundingClientRect();for (var n in i) {
				E[o][n] = i[n];
			}T(function () {
				delete E[o];
			});
		}return E[o];
	},
	    A = [],
	    T = function T(t) {
		A.push(t);
	},
	    S = function S() {
		for (var t = void 0; t = A.pop();) {
			t();
		}
	},
	    W = function () {
		function t() {
			i(this, t);
		}return w(t, [{ key: "on", value: function value(t, e, o) {
				var i = arguments.length <= 3 || void 0 === arguments[3] ? !1 : arguments[3];"undefined" == typeof this.bindings && (this.bindings = {}), "undefined" == typeof this.bindings[t] && (this.bindings[t] = []), this.bindings[t].push({ handler: e, ctx: o, once: i });
			} }, { key: "once", value: function value(t, e, o) {
				this.on(t, e, o, !0);
			} }, { key: "off", value: function value(t, e) {
				if ("undefined" == typeof this.bindings || "undefined" == typeof this.bindings[t]) if ("undefined" == typeof e) delete this.bindings[t];else for (var o = 0; o < this.bindings[t].length;) {
					this.bindings[t][o].handler === e ? this.bindings[t].splice(o, 1) : ++o;
				}
			} }, { key: "trigger", value: function value(t) {
				if ("undefined" != typeof this.bindings && this.bindings[t]) {
					for (var e = 0, o = arguments.length, i = Array(o > 1 ? o - 1 : 0), n = 1; o > n; n++) {
						i[n - 1] = arguments[n];
					}for (; e < this.bindings[t].length;) {
						var r = this.bindings[t][e],
						    s = r.handler,
						    a = r.ctx,
						    f = r.once,
						    h = a;"undefined" == typeof h && (h = this), s.apply(h, i), f ? this.bindings[t].splice(e, 1) : ++e;
					}
				}
			} }]), t;
	}();C.Utils = { getScrollParents: n, getBounds: r, getOffsetParent: s, extend: f, addClass: l, removeClass: h, hasClass: d, updateClasses: c, defer: T, flush: S, uniqueId: O, Evented: W, getScrollBarSize: a };var M = function () {
		function t(t, e) {
			var o = [],
			    i = !0,
			    n = !1,
			    r = void 0;try {
				for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
			} catch (f) {
				n = !0, r = f;
			} finally {
				try {
					!i && a["return"] && a["return"]();
				} finally {
					if (n) throw r;
				}
			}return o;
		}return function (e, o) {
			if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
		};
	}(),
	    w = function () {
		function t(t, e) {
			for (var o = 0; o < e.length; o++) {
				var i = e[o];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
			}
		}return function (e, o, i) {
			return o && t(e.prototype, o), i && t(e, i), e;
		};
	}();if ("undefined" == typeof C) throw new Error("You must include the utils.js file before tether.js");var P = C.Utils,
	    n = P.getScrollParents,
	    r = P.getBounds,
	    s = P.getOffsetParent,
	    f = P.extend,
	    l = P.addClass,
	    h = P.removeClass,
	    c = P.updateClasses,
	    T = P.defer,
	    S = P.flush,
	    a = P.getScrollBarSize,
	    k = function () {
		if ("undefined" == typeof document) return "";for (var t = document.createElement("div"), e = ["transform", "webkitTransform", "OTransform", "MozTransform", "msTransform"], o = 0; o < e.length; ++o) {
			var i = e[o];if (void 0 !== t.style[i]) return i;
		}
	}(),
	    B = [],
	    _ = function _() {
		B.forEach(function (t) {
			t.position(!1);
		}), S();
	};!function () {
		var t = null,
		    e = null,
		    o = null,
		    i = function n() {
			return "undefined" != typeof e && e > 16 ? (e = Math.min(e - 16, 250), void (o = setTimeout(n, 250))) : void ("undefined" != typeof t && m() - t < 10 || ("undefined" != typeof o && (clearTimeout(o), o = null), t = m(), _(), e = m() - t));
		};"undefined" != typeof window && "undefined" != typeof window.addEventListener && ["resize", "scroll", "touchmove"].forEach(function (t) {
			window.addEventListener(t, i);
		});
	}();var z = { center: "center", left: "right", right: "left" },
	    L = { middle: "middle", top: "bottom", bottom: "top" },
	    Y = { top: 0, left: 0, middle: "50%", center: "50%", bottom: "100%", right: "100%" },
	    H = function H(t, e) {
		var o = t.left,
		    i = t.top;return "auto" === o && (o = z[e.left]), "auto" === i && (i = L[e.top]), { left: o, top: i };
	},
	    F = function F(t) {
		var e = t.left,
		    o = t.top;return "undefined" != typeof Y[t.left] && (e = Y[t.left]), "undefined" != typeof Y[t.top] && (o = Y[t.top]), { left: e, top: o };
	},
	    X = function X(t) {
		var e = t.split(" "),
		    o = M(e, 2),
		    i = o[0],
		    n = o[1];return { top: i, left: n };
	},
	    j = X,
	    N = function () {
		function t(e) {
			var o = this;i(this, t), this.position = this.position.bind(this), B.push(this), this.history = [], this.setOptions(e, !1), C.modules.forEach(function (t) {
				"undefined" != typeof t.initialize && t.initialize.call(o);
			}), this.position();
		}return w(t, [{ key: "getClass", value: function value() {
				var t = arguments.length <= 0 || void 0 === arguments[0] ? "" : arguments[0],
				    e = this.options.classes;return "undefined" != typeof e && e[t] ? this.options.classes[t] : this.options.classPrefix ? this.options.classPrefix + "-" + t : t;
			} }, { key: "setOptions", value: function value(t) {
				var e = this,
				    o = arguments.length <= 1 || void 0 === arguments[1] ? !0 : arguments[1],
				    i = { offset: "0 0", targetOffset: "0 0", targetAttachment: "auto auto", classPrefix: "tether" };this.options = f(i, t);var r = this.options,
				    s = r.element,
				    a = r.target,
				    h = r.targetModifier;if (this.element = s, this.target = a, this.targetModifier = h, "viewport" === this.target ? (this.target = document.body, this.targetModifier = "visible") : "scroll-handle" === this.target && (this.target = document.body, this.targetModifier = "scroll-handle"), ["element", "target"].forEach(function (t) {
					if ("undefined" == typeof e[t]) throw new Error("Tether Error: Both element and target must be defined");"undefined" != typeof e[t].jquery ? e[t] = e[t][0] : "string" == typeof e[t] && (e[t] = document.querySelector(e[t]));
				}), l(this.element, this.getClass("element")), this.options.addTargetClasses !== !1 && l(this.target, this.getClass("target")), !this.options.attachment) throw new Error("Tether Error: You must provide an attachment");this.targetAttachment = j(this.options.targetAttachment), this.attachment = j(this.options.attachment), this.offset = X(this.options.offset), this.targetOffset = X(this.options.targetOffset), "undefined" != typeof this.scrollParents && this.disable(), "scroll-handle" === this.targetModifier ? this.scrollParents = [this.target] : this.scrollParents = n(this.target), this.options.enabled !== !1 && this.enable(o);
			} }, { key: "getTargetBounds", value: function value() {
				if ("undefined" == typeof this.targetModifier) return r(this.target);if ("visible" === this.targetModifier) {
					if (this.target === document.body) return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };var t = r(this.target),
					    e = { height: t.height, width: t.width, top: t.top, left: t.left };return e.height = Math.min(e.height, t.height - (pageYOffset - t.top)), e.height = Math.min(e.height, t.height - (t.top + t.height - (pageYOffset + innerHeight))), e.height = Math.min(innerHeight, e.height), e.height -= 2, e.width = Math.min(e.width, t.width - (pageXOffset - t.left)), e.width = Math.min(e.width, t.width - (t.left + t.width - (pageXOffset + innerWidth))), e.width = Math.min(innerWidth, e.width), e.width -= 2, e.top < pageYOffset && (e.top = pageYOffset), e.left < pageXOffset && (e.left = pageXOffset), e;
				}if ("scroll-handle" === this.targetModifier) {
					var t = void 0,
					    o = this.target;o === document.body ? (o = document.documentElement, t = { left: pageXOffset, top: pageYOffset, height: innerHeight, width: innerWidth }) : t = r(o);var i = getComputedStyle(o),
					    n = o.scrollWidth > o.clientWidth || [i.overflow, i.overflowX].indexOf("scroll") >= 0 || this.target !== document.body,
					    s = 0;n && (s = 15);var a = t.height - parseFloat(i.borderTopWidth) - parseFloat(i.borderBottomWidth) - s,
					    e = { width: 15, height: .975 * a * (a / o.scrollHeight), left: t.left + t.width - parseFloat(i.borderLeftWidth) - 15 },
					    f = 0;408 > a && this.target === document.body && (f = -11e-5 * Math.pow(a, 2) - .00727 * a + 22.58), this.target !== document.body && (e.height = Math.max(e.height, 24));var h = this.target.scrollTop / (o.scrollHeight - a);return e.top = h * (a - e.height - f) + t.top + parseFloat(i.borderTopWidth), this.target === document.body && (e.height = Math.max(e.height, 24)), e;
				}
			} }, { key: "clearCache", value: function value() {
				this._cache = {};
			} }, { key: "cache", value: function value(t, e) {
				return "undefined" == typeof this._cache && (this._cache = {}), "undefined" == typeof this._cache[t] && (this._cache[t] = e.call(this)), this._cache[t];
			} }, { key: "enable", value: function value() {
				var t = this,
				    e = arguments.length <= 0 || void 0 === arguments[0] ? !0 : arguments[0];this.options.addTargetClasses !== !1 && l(this.target, this.getClass("enabled")), l(this.element, this.getClass("enabled")), this.enabled = !0, this.scrollParents.forEach(function (e) {
					e !== document && e.addEventListener("scroll", t.position);
				}), e && this.position();
			} }, { key: "disable", value: function value() {
				var t = this;h(this.target, this.getClass("enabled")), h(this.element, this.getClass("enabled")), this.enabled = !1, "undefined" != typeof this.scrollParents && this.scrollParents.forEach(function (e) {
					e.removeEventListener("scroll", t.position);
				});
			} }, { key: "destroy", value: function value() {
				var t = this;this.disable(), B.forEach(function (e, o) {
					return e === t ? void B.splice(o, 1) : void 0;
				});
			} }, { key: "updateAttachClasses", value: function value(t, e) {
				var o = this;t = t || this.attachment, e = e || this.targetAttachment;var i = ["left", "top", "bottom", "right", "middle", "center"];"undefined" != typeof this._addAttachClasses && this._addAttachClasses.length && this._addAttachClasses.splice(0, this._addAttachClasses.length), "undefined" == typeof this._addAttachClasses && (this._addAttachClasses = []);var n = this._addAttachClasses;t.top && n.push(this.getClass("element-attached") + "-" + t.top), t.left && n.push(this.getClass("element-attached") + "-" + t.left), e.top && n.push(this.getClass("target-attached") + "-" + e.top), e.left && n.push(this.getClass("target-attached") + "-" + e.left);var r = [];i.forEach(function (t) {
					r.push(o.getClass("element-attached") + "-" + t), r.push(o.getClass("target-attached") + "-" + t);
				}), T(function () {
					"undefined" != typeof o._addAttachClasses && (c(o.element, o._addAttachClasses, r), o.options.addTargetClasses !== !1 && c(o.target, o._addAttachClasses, r), delete o._addAttachClasses);
				});
			} }, { key: "position", value: function value() {
				var t = this,
				    e = arguments.length <= 0 || void 0 === arguments[0] ? !0 : arguments[0];if (this.enabled) {
					this.clearCache();var o = H(this.targetAttachment, this.attachment);this.updateAttachClasses(this.attachment, o);var i = this.cache("element-bounds", function () {
						return r(t.element);
					}),
					    n = i.width,
					    f = i.height;if (0 === n && 0 === f && "undefined" != typeof this.lastSize) {
						var h = this.lastSize;n = h.width, f = h.height;
					} else this.lastSize = { width: n, height: f };var l = this.cache("target-bounds", function () {
						return t.getTargetBounds();
					}),
					    d = l,
					    u = y(F(this.attachment), { width: n, height: f }),
					    p = y(F(o), d),
					    c = y(this.offset, { width: n, height: f }),
					    g = y(this.targetOffset, d);u = v(u, c), p = v(p, g);for (var m = l.left + p.left - u.left, b = l.top + p.top - u.top, w = 0; w < C.modules.length; ++w) {
						var O = C.modules[w],
						    E = O.position.call(this, { left: m, top: b, targetAttachment: o, targetPos: l, elementPos: i, offset: u, targetOffset: p, manualOffset: c, manualTargetOffset: g, scrollbarSize: A, attachment: this.attachment });if (E === !1) return !1;"undefined" != typeof E && "object" == (typeof E === "undefined" ? "undefined" : _typeof(E)) && (b = E.top, m = E.left);
					}var x = { page: { top: b, left: m }, viewport: { top: b - pageYOffset, bottom: pageYOffset - b - f + innerHeight, left: m - pageXOffset, right: pageXOffset - m - n + innerWidth } },
					    A = void 0;return document.body.scrollWidth > window.innerWidth && (A = this.cache("scrollbar-size", a), x.viewport.bottom -= A.height), document.body.scrollHeight > window.innerHeight && (A = this.cache("scrollbar-size", a), x.viewport.right -= A.width), (-1 === ["", "static"].indexOf(document.body.style.position) || -1 === ["", "static"].indexOf(document.body.parentElement.style.position)) && (x.page.bottom = document.body.scrollHeight - b - f, x.page.right = document.body.scrollWidth - m - n), "undefined" != typeof this.options.optimizations && this.options.optimizations.moveElement !== !1 && "undefined" == typeof this.targetModifier && !function () {
						var e = t.cache("target-offsetparent", function () {
							return s(t.target);
						}),
						    o = t.cache("target-offsetparent-bounds", function () {
							return r(e);
						}),
						    i = getComputedStyle(e),
						    n = o,
						    a = {};if (["Top", "Left", "Bottom", "Right"].forEach(function (t) {
							a[t.toLowerCase()] = parseFloat(i["border" + t + "Width"]);
						}), o.right = document.body.scrollWidth - o.left - n.width + a.right, o.bottom = document.body.scrollHeight - o.top - n.height + a.bottom, x.page.top >= o.top + a.top && x.page.bottom >= o.bottom && x.page.left >= o.left + a.left && x.page.right >= o.right) {
							var f = e.scrollTop,
							    h = e.scrollLeft;x.offset = { top: x.page.top - o.top + f - a.top, left: x.page.left - o.left + h - a.left };
						}
					}(), this.move(x), this.history.unshift(x), this.history.length > 3 && this.history.pop(), e && S(), !0;
				}
			} }, { key: "move", value: function value(t) {
				var e = this;if ("undefined" != typeof this.element.parentNode) {
					var o = {};for (var i in t) {
						o[i] = {};for (var n in t[i]) {
							for (var r = !1, a = 0; a < this.history.length; ++a) {
								var h = this.history[a];if ("undefined" != typeof h[i] && !g(h[i][n], t[i][n])) {
									r = !0;break;
								}
							}r || (o[i][n] = !0);
						}
					}var l = { top: "", left: "", right: "", bottom: "" },
					    d = function d(t, o) {
						var i = "undefined" != typeof e.options.optimizations,
						    n = i ? e.options.optimizations.gpu : null;if (n !== !1) {
							var r = void 0,
							    s = void 0;t.top ? (l.top = 0, r = o.top) : (l.bottom = 0, r = -o.bottom), t.left ? (l.left = 0, s = o.left) : (l.right = 0, s = -o.right), l[k] = "translateX(" + Math.round(s) + "px) translateY(" + Math.round(r) + "px)", "msTransform" !== k && (l[k] += " translateZ(0)");
						} else t.top ? l.top = o.top + "px" : l.bottom = o.bottom + "px", t.left ? l.left = o.left + "px" : l.right = o.right + "px";
					},
					    u = !1;if ((o.page.top || o.page.bottom) && (o.page.left || o.page.right) ? (l.position = "absolute", d(o.page, t.page)) : (o.viewport.top || o.viewport.bottom) && (o.viewport.left || o.viewport.right) ? (l.position = "fixed", d(o.viewport, t.viewport)) : "undefined" != typeof o.offset && o.offset.top && o.offset.left ? !function () {
						l.position = "absolute";var i = e.cache("target-offsetparent", function () {
							return s(e.target);
						});s(e.element) !== i && T(function () {
							e.element.parentNode.removeChild(e.element), i.appendChild(e.element);
						}), d(o.offset, t.offset), u = !0;
					}() : (l.position = "absolute", d({ top: !0, left: !0 }, t.page)), !u) {
						for (var p = !0, c = this.element.parentNode; c && "BODY" !== c.tagName;) {
							if ("static" !== getComputedStyle(c).position) {
								p = !1;break;
							}c = c.parentNode;
						}p || (this.element.parentNode.removeChild(this.element), document.body.appendChild(this.element));
					}var m = {},
					    v = !1;for (var n in l) {
						var y = l[n],
						    b = this.element.style[n];b !== y && (v = !0, m[n] = y);
					}v && T(function () {
						f(e.element.style, m);
					});
				}
			} }]), t;
	}();N.modules = [], C.position = _;var R = f(N, C),
	    M = function () {
		function t(t, e) {
			var o = [],
			    i = !0,
			    n = !1,
			    r = void 0;try {
				for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
			} catch (f) {
				n = !0, r = f;
			} finally {
				try {
					!i && a["return"] && a["return"]();
				} finally {
					if (n) throw r;
				}
			}return o;
		}return function (e, o) {
			if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
		};
	}(),
	    P = C.Utils,
	    r = P.getBounds,
	    f = P.extend,
	    c = P.updateClasses,
	    T = P.defer,
	    U = ["left", "top", "right", "bottom"];C.modules.push({ position: function position(t) {
			var e = this,
			    o = t.top,
			    i = t.left,
			    n = t.targetAttachment;if (!this.options.constraints) return !0;var s = this.cache("element-bounds", function () {
				return r(e.element);
			}),
			    a = s.height,
			    h = s.width;if (0 === h && 0 === a && "undefined" != typeof this.lastSize) {
				var l = this.lastSize;h = l.width, a = l.height;
			}var d = this.cache("target-bounds", function () {
				return e.getTargetBounds();
			}),
			    u = d.height,
			    p = d.width,
			    g = [this.getClass("pinned"), this.getClass("out-of-bounds")];this.options.constraints.forEach(function (t) {
				var e = t.outOfBoundsClass,
				    o = t.pinnedClass;e && g.push(e), o && g.push(o);
			}), g.forEach(function (t) {
				["left", "top", "right", "bottom"].forEach(function (e) {
					g.push(t + "-" + e);
				});
			});var m = [],
			    v = f({}, n),
			    y = f({}, this.attachment);return this.options.constraints.forEach(function (t) {
				var r = t.to,
				    s = t.attachment,
				    f = t.pin;"undefined" == typeof s && (s = "");var l = void 0,
				    d = void 0;if (s.indexOf(" ") >= 0) {
					var c = s.split(" "),
					    g = M(c, 2);d = g[0], l = g[1];
				} else l = d = s;var w = b(e, r);("target" === d || "both" === d) && (o < w[1] && "top" === v.top && (o += u, v.top = "bottom"), o + a > w[3] && "bottom" === v.top && (o -= u, v.top = "top")), "together" === d && ("top" === v.top && ("bottom" === y.top && o < w[1] ? (o += u, v.top = "bottom", o += a, y.top = "top") : "top" === y.top && o + a > w[3] && o - (a - u) >= w[1] && (o -= a - u, v.top = "bottom", y.top = "bottom")), "bottom" === v.top && ("top" === y.top && o + a > w[3] ? (o -= u, v.top = "top", o -= a, y.top = "bottom") : "bottom" === y.top && o < w[1] && o + (2 * a - u) <= w[3] && (o += a - u, v.top = "top", y.top = "top")), "middle" === v.top && (o + a > w[3] && "top" === y.top ? (o -= a, y.top = "bottom") : o < w[1] && "bottom" === y.top && (o += a, y.top = "top"))), ("target" === l || "both" === l) && (i < w[0] && "left" === v.left && (i += p, v.left = "right"), i + h > w[2] && "right" === v.left && (i -= p, v.left = "left")), "together" === l && (i < w[0] && "left" === v.left ? "right" === y.left ? (i += p, v.left = "right", i += h, y.left = "left") : "left" === y.left && (i += p, v.left = "right", i -= h, y.left = "right") : i + h > w[2] && "right" === v.left ? "left" === y.left ? (i -= p, v.left = "left", i -= h, y.left = "right") : "right" === y.left && (i -= p, v.left = "left", i += h, y.left = "left") : "center" === v.left && (i + h > w[2] && "left" === y.left ? (i -= h, y.left = "right") : i < w[0] && "right" === y.left && (i += h, y.left = "left"))), ("element" === d || "both" === d) && (o < w[1] && "bottom" === y.top && (o += a, y.top = "top"), o + a > w[3] && "top" === y.top && (o -= a, y.top = "bottom")), ("element" === l || "both" === l) && (i < w[0] && ("right" === y.left ? (i += h, y.left = "left") : "center" === y.left && (i += h / 2, y.left = "left")), i + h > w[2] && ("left" === y.left ? (i -= h, y.left = "right") : "center" === y.left && (i -= h / 2, y.left = "right"))), "string" == typeof f ? f = f.split(",").map(function (t) {
					return t.trim();
				}) : f === !0 && (f = ["top", "left", "right", "bottom"]), f = f || [];var C = [],
				    O = [];o < w[1] && (f.indexOf("top") >= 0 ? (o = w[1], C.push("top")) : O.push("top")), o + a > w[3] && (f.indexOf("bottom") >= 0 ? (o = w[3] - a, C.push("bottom")) : O.push("bottom")), i < w[0] && (f.indexOf("left") >= 0 ? (i = w[0], C.push("left")) : O.push("left")), i + h > w[2] && (f.indexOf("right") >= 0 ? (i = w[2] - h, C.push("right")) : O.push("right")), C.length && !function () {
					var t = void 0;t = "undefined" != typeof e.options.pinnedClass ? e.options.pinnedClass : e.getClass("pinned"), m.push(t), C.forEach(function (e) {
						m.push(t + "-" + e);
					});
				}(), O.length && !function () {
					var t = void 0;t = "undefined" != typeof e.options.outOfBoundsClass ? e.options.outOfBoundsClass : e.getClass("out-of-bounds"), m.push(t), O.forEach(function (e) {
						m.push(t + "-" + e);
					});
				}(), (C.indexOf("left") >= 0 || C.indexOf("right") >= 0) && (y.left = v.left = !1), (C.indexOf("top") >= 0 || C.indexOf("bottom") >= 0) && (y.top = v.top = !1), (v.top !== n.top || v.left !== n.left || y.top !== e.attachment.top || y.left !== e.attachment.left) && e.updateAttachClasses(y, v);
			}), T(function () {
				e.options.addTargetClasses !== !1 && c(e.target, m, g), c(e.element, m, g);
			}), { top: o, left: i };
		} });var P = C.Utils,
	    r = P.getBounds,
	    c = P.updateClasses,
	    T = P.defer;C.modules.push({ position: function position(t) {
			var e = this,
			    o = t.top,
			    i = t.left,
			    n = this.cache("element-bounds", function () {
				return r(e.element);
			}),
			    s = n.height,
			    a = n.width,
			    f = this.getTargetBounds(),
			    h = o + s,
			    l = i + a,
			    d = [];o <= f.bottom && h >= f.top && ["left", "right"].forEach(function (t) {
				var e = f[t];(e === i || e === l) && d.push(t);
			}), i <= f.right && l >= f.left && ["top", "bottom"].forEach(function (t) {
				var e = f[t];(e === o || e === h) && d.push(t);
			});var u = [],
			    p = [],
			    g = ["left", "top", "right", "bottom"];return u.push(this.getClass("abutted")), g.forEach(function (t) {
				u.push(e.getClass("abutted") + "-" + t);
			}), d.length && p.push(this.getClass("abutted")), d.forEach(function (t) {
				p.push(e.getClass("abutted") + "-" + t);
			}), T(function () {
				e.options.addTargetClasses !== !1 && c(e.target, p, u), c(e.element, p, u);
			}), !0;
		} });var M = function () {
		function t(t, e) {
			var o = [],
			    i = !0,
			    n = !1,
			    r = void 0;try {
				for (var s, a = t[Symbol.iterator](); !(i = (s = a.next()).done) && (o.push(s.value), !e || o.length !== e); i = !0) {}
			} catch (f) {
				n = !0, r = f;
			} finally {
				try {
					!i && a["return"] && a["return"]();
				} finally {
					if (n) throw r;
				}
			}return o;
		}return function (e, o) {
			if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, o);throw new TypeError("Invalid attempt to destructure non-iterable instance");
		};
	}();return C.modules.push({ position: function position(t) {
			var e = t.top,
			    o = t.left;if (this.options.shift) {
				var i = this.options.shift;"function" == typeof this.options.shift && (i = this.options.shift.call(this, { top: e, left: o }));var n = void 0,
				    r = void 0;if ("string" == typeof i) {
					i = i.split(" "), i[1] = i[1] || i[0];var s = i,
					    a = M(s, 2);n = a[0], r = a[1], n = parseFloat(n, 10), r = parseFloat(r, 10);
				} else n = i.top, r = i.left;return e += n, o += r, { top: e, left: o };
			}
		} }), R;
});

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Util = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Private TransitionEnd Helpers
  * ------------------------------------------------------------------------
  */

	var transition = false;

	var MAX_UID = 1000000;

	var TransitionEndEvent = {
		WebkitTransition: 'webkitTransitionEnd',
		MozTransition: 'transitionend',
		OTransition: 'oTransitionEnd otransitionend',
		transition: 'transitionend'
	};

	// shoutout AngusCroll (https://goo.gl/pxwQGp)
	function toType(obj) {
		return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	}

	function isElement(obj) {
		return (obj[0] || obj).nodeType;
	}

	function getSpecialTransitionEndEvent() {
		return {
			bindType: transition.end,
			delegateType: transition.end,
			handle: function handle(event) {
				if ($(event.target).is(this)) {
					return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
				}
				return undefined;
			}
		};
	}

	function transitionEndTest() {
		if (window.QUnit) {
			return false;
		}

		var el = document.createElement('bootstrap');

		for (var name in TransitionEndEvent) {
			if (el.style[name] !== undefined) {
				return {
					end: TransitionEndEvent[name]
				};
			}
		}

		return false;
	}

	function transitionEndEmulator(duration) {
		var _this = this;

		var called = false;

		$(this).one(Util.TRANSITION_END, function () {
			called = true;
		});

		setTimeout(function () {
			if (!called) {
				Util.triggerTransitionEnd(_this);
			}
		}, duration);

		return this;
	}

	function setTransitionEndSupport() {
		transition = transitionEndTest();

		$.fn.emulateTransitionEnd = transitionEndEmulator;

		if (Util.supportsTransitionEnd()) {
			$.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
		}
	}

	/**
  * --------------------------------------------------------------------------
  * Public Util Api
  * --------------------------------------------------------------------------
  */

	var Util = {

		TRANSITION_END: 'bsTransitionEnd',

		getUID: function getUID(prefix) {
			do {
				// eslint-disable-next-line no-bitwise
				prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
			} while (document.getElementById(prefix));
			return prefix;
		},
		getSelectorFromElement: function getSelectorFromElement(element) {
			var selector = element.getAttribute('data-target');

			if (!selector) {
				selector = element.getAttribute('href') || '';
				selector = /^#[a-z]/i.test(selector) ? selector : null;
			}

			return selector;
		},
		reflow: function reflow(element) {
			return element.offsetHeight;
		},
		triggerTransitionEnd: function triggerTransitionEnd(element) {
			$(element).trigger(transition.end);
		},
		supportsTransitionEnd: function supportsTransitionEnd() {
			return Boolean(transition);
		},
		typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
			for (var property in configTypes) {
				if (configTypes.hasOwnProperty(property)) {
					var expectedTypes = configTypes[property];
					var value = config[property];
					var valueType = value && isElement(value) ? 'element' : toType(value);

					if (!new RegExp(expectedTypes).test(valueType)) {
						throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
					}
				}
			}
		}
	};

	setTransitionEndSupport();

	return Util;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Alert = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'alert';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.alert';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 150;

	var Selector = {
		DISMISS: '[data-dismiss="alert"]'
	};

	var Event = {
		CLOSE: "close" + EVENT_KEY,
		CLOSED: "closed" + EVENT_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		ALERT: 'alert',
		FADE: 'fade',
		SHOW: 'show'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Alert = function () {
		function Alert(element) {
			_classCallCheck(this, Alert);

			this._element = element;
		}

		// getters

		_createClass(Alert, [{
			key: "close",


			// public

			value: function close(element) {
				element = element || this._element;

				var rootElement = this._getRootElement(element);
				var customEvent = this._triggerCloseEvent(rootElement);

				if (customEvent.isDefaultPrevented()) {
					return;
				}

				this._removeElement(rootElement);
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);
				this._element = null;
			}

			// private

		}, {
			key: "_getRootElement",
			value: function _getRootElement(element) {
				var selector = Util.getSelectorFromElement(element);
				var parent = false;

				if (selector) {
					parent = $(selector)[0];
				}

				if (!parent) {
					parent = $(element).closest("." + ClassName.ALERT)[0];
				}

				return parent;
			}
		}, {
			key: "_triggerCloseEvent",
			value: function _triggerCloseEvent(element) {
				var closeEvent = $.Event(Event.CLOSE);

				$(element).trigger(closeEvent);
				return closeEvent;
			}
		}, {
			key: "_removeElement",
			value: function _removeElement(element) {
				var _this2 = this;

				$(element).removeClass(ClassName.SHOW);

				if (!Util.supportsTransitionEnd() || !$(element).hasClass(ClassName.FADE)) {
					this._destroyElement(element);
					return;
				}

				$(element).one(Util.TRANSITION_END, function (event) {
					return _this2._destroyElement(element, event);
				}).emulateTransitionEnd(TRANSITION_DURATION);
			}
		}, {
			key: "_destroyElement",
			value: function _destroyElement(element) {
				$(element).detach().trigger(Event.CLOSED).remove();
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Alert(this);
						$element.data(DATA_KEY, data);
					}

					if (config === 'close') {
						data[config](this);
					}
				});
			}
		}, {
			key: "_handleDismiss",
			value: function _handleDismiss(alertInstance) {
				return function (event) {
					if (event) {
						event.preventDefault();
					}

					alertInstance.close(this);
				};
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}]);

		return Alert;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Alert._jQueryInterface;
	$.fn[NAME].Constructor = Alert;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Alert._jQueryInterface;
	};

	return Alert;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Button = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'button';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.button';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];

	var ClassName = {
		ACTIVE: 'active',
		BUTTON: 'btn',
		FOCUS: 'focus'
	};

	var Selector = {
		DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
		DATA_TOGGLE: '[data-toggle="buttons"]',
		INPUT: 'input',
		ACTIVE: '.active',
		BUTTON: '.btn'
	};

	var Event = {
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
		FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Button = function () {
		function Button(element) {
			_classCallCheck(this, Button);

			this._element = element;
		}

		// getters

		_createClass(Button, [{
			key: "toggle",


			// public

			value: function toggle() {
				var triggerChangeEvent = true;
				var rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];

				if (rootElement) {
					var input = $(this._element).find(Selector.INPUT)[0];

					if (input) {
						if (input.type === 'radio') {
							if (input.checked && $(this._element).hasClass(ClassName.ACTIVE)) {
								triggerChangeEvent = false;
							} else {
								var activeElement = $(rootElement).find(Selector.ACTIVE)[0];

								if (activeElement) {
									$(activeElement).removeClass(ClassName.ACTIVE);
								}
							}
						}

						if (triggerChangeEvent) {
							input.checked = !$(this._element).hasClass(ClassName.ACTIVE);
							$(input).trigger('change');
						}

						input.focus();
					}
				}

				this._element.setAttribute('aria-pressed', !$(this._element).hasClass(ClassName.ACTIVE));

				if (triggerChangeEvent) {
					$(this._element).toggleClass(ClassName.ACTIVE);
				}
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);
				this._element = null;
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);

					if (!data) {
						data = new Button(this);
						$(this).data(DATA_KEY, data);
					}

					if (config === 'toggle') {
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}]);

		return Button;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
		event.preventDefault();

		var button = event.target;

		if (!$(button).hasClass(ClassName.BUTTON)) {
			button = $(button).closest(Selector.BUTTON);
		}

		Button._jQueryInterface.call($(button), 'toggle');
	}).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
		var button = $(event.target).closest(Selector.BUTTON)[0];
		$(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Button._jQueryInterface;
	$.fn[NAME].Constructor = Button;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Button._jQueryInterface;
	};

	return Button;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Carousel = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'carousel';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.carousel';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 600;
	var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key
	var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

	var Default = {
		interval: 5000,
		keyboard: true,
		slide: false,
		pause: 'hover',
		wrap: true
	};

	var DefaultType = {
		interval: '(number|boolean)',
		keyboard: 'boolean',
		slide: '(boolean|string)',
		pause: '(string|boolean)',
		wrap: 'boolean'
	};

	var Direction = {
		NEXT: 'next',
		PREV: 'prev',
		LEFT: 'left',
		RIGHT: 'right'
	};

	var Event = {
		SLIDE: "slide" + EVENT_KEY,
		SLID: "slid" + EVENT_KEY,
		KEYDOWN: "keydown" + EVENT_KEY,
		MOUSEENTER: "mouseenter" + EVENT_KEY,
		MOUSELEAVE: "mouseleave" + EVENT_KEY,
		LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		CAROUSEL: 'carousel',
		ACTIVE: 'active',
		SLIDE: 'slide',
		RIGHT: 'carousel-item-right',
		LEFT: 'carousel-item-left',
		NEXT: 'carousel-item-next',
		PREV: 'carousel-item-prev',
		ITEM: 'carousel-item'
	};

	var Selector = {
		ACTIVE: '.active',
		ACTIVE_ITEM: '.active.carousel-item',
		ITEM: '.carousel-item',
		NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
		INDICATORS: '.carousel-indicators',
		DATA_SLIDE: '[data-slide], [data-slide-to]',
		DATA_RIDE: '[data-ride="carousel"]'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Carousel = function () {
		function Carousel(element, config) {
			_classCallCheck(this, Carousel);

			this._items = null;
			this._interval = null;
			this._activeElement = null;

			this._isPaused = false;
			this._isSliding = false;

			this._config = this._getConfig(config);
			this._element = $(element)[0];
			this._indicatorsElement = $(this._element).find(Selector.INDICATORS)[0];

			this._addEventListeners();
		}

		// getters

		_createClass(Carousel, [{
			key: "next",


			// public

			value: function next() {
				if (this._isSliding) {
					throw new Error('Carousel is sliding');
				}
				this._slide(Direction.NEXT);
			}
		}, {
			key: "nextWhenVisible",
			value: function nextWhenVisible() {
				// Don't call next when the page isn't visible
				if (!document.hidden) {
					this.next();
				}
			}
		}, {
			key: "prev",
			value: function prev() {
				if (this._isSliding) {
					throw new Error('Carousel is sliding');
				}
				this._slide(Direction.PREVIOUS);
			}
		}, {
			key: "pause",
			value: function pause(event) {
				if (!event) {
					this._isPaused = true;
				}

				if ($(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
					Util.triggerTransitionEnd(this._element);
					this.cycle(true);
				}

				clearInterval(this._interval);
				this._interval = null;
			}
		}, {
			key: "cycle",
			value: function cycle(event) {
				if (!event) {
					this._isPaused = false;
				}

				if (this._interval) {
					clearInterval(this._interval);
					this._interval = null;
				}

				if (this._config.interval && !this._isPaused) {
					this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
				}
			}
		}, {
			key: "to",
			value: function to(index) {
				var _this3 = this;

				this._activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];

				var activeIndex = this._getItemIndex(this._activeElement);

				if (index > this._items.length - 1 || index < 0) {
					return;
				}

				if (this._isSliding) {
					$(this._element).one(Event.SLID, function () {
						return _this3.to(index);
					});
					return;
				}

				if (activeIndex === index) {
					this.pause();
					this.cycle();
					return;
				}

				var direction = index > activeIndex ? Direction.NEXT : Direction.PREVIOUS;

				this._slide(direction, this._items[index]);
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$(this._element).off(EVENT_KEY);
				$.removeData(this._element, DATA_KEY);

				this._items = null;
				this._config = null;
				this._element = null;
				this._interval = null;
				this._isPaused = null;
				this._isSliding = null;
				this._activeElement = null;
				this._indicatorsElement = null;
			}

			// private

		}, {
			key: "_getConfig",
			value: function _getConfig(config) {
				config = $.extend({}, Default, config);
				Util.typeCheckConfig(NAME, config, DefaultType);
				return config;
			}
		}, {
			key: "_addEventListeners",
			value: function _addEventListeners() {
				var _this4 = this;

				if (this._config.keyboard) {
					$(this._element).on(Event.KEYDOWN, function (event) {
						return _this4._keydown(event);
					});
				}

				if (this._config.pause === 'hover' && !('ontouchstart' in document.documentElement)) {
					$(this._element).on(Event.MOUSEENTER, function (event) {
						return _this4.pause(event);
					}).on(Event.MOUSELEAVE, function (event) {
						return _this4.cycle(event);
					});
				}
			}
		}, {
			key: "_keydown",
			value: function _keydown(event) {
				if (/input|textarea/i.test(event.target.tagName)) {
					return;
				}

				switch (event.which) {
					case ARROW_LEFT_KEYCODE:
						event.preventDefault();
						this.prev();
						break;
					case ARROW_RIGHT_KEYCODE:
						event.preventDefault();
						this.next();
						break;
					default:
						return;
				}
			}
		}, {
			key: "_getItemIndex",
			value: function _getItemIndex(element) {
				this._items = $.makeArray($(element).parent().find(Selector.ITEM));
				return this._items.indexOf(element);
			}
		}, {
			key: "_getItemByDirection",
			value: function _getItemByDirection(direction, activeElement) {
				var isNextDirection = direction === Direction.NEXT;
				var isPrevDirection = direction === Direction.PREVIOUS;
				var activeIndex = this._getItemIndex(activeElement);
				var lastItemIndex = this._items.length - 1;
				var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

				if (isGoingToWrap && !this._config.wrap) {
					return activeElement;
				}

				var delta = direction === Direction.PREVIOUS ? -1 : 1;
				var itemIndex = (activeIndex + delta) % this._items.length;

				return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
			}
		}, {
			key: "_triggerSlideEvent",
			value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
				var slideEvent = $.Event(Event.SLIDE, {
					relatedTarget: relatedTarget,
					direction: eventDirectionName
				});

				$(this._element).trigger(slideEvent);

				return slideEvent;
			}
		}, {
			key: "_setActiveIndicatorElement",
			value: function _setActiveIndicatorElement(element) {
				if (this._indicatorsElement) {
					$(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

					var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

					if (nextIndicator) {
						$(nextIndicator).addClass(ClassName.ACTIVE);
					}
				}
			}
		}, {
			key: "_slide",
			value: function _slide(direction, element) {
				var _this5 = this;

				var activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];
				var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

				var isCycling = Boolean(this._interval);

				var directionalClassName = void 0;
				var orderClassName = void 0;
				var eventDirectionName = void 0;

				if (direction === Direction.NEXT) {
					directionalClassName = ClassName.LEFT;
					orderClassName = ClassName.NEXT;
					eventDirectionName = Direction.LEFT;
				} else {
					directionalClassName = ClassName.RIGHT;
					orderClassName = ClassName.PREV;
					eventDirectionName = Direction.RIGHT;
				}

				if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {
					this._isSliding = false;
					return;
				}

				var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
				if (slideEvent.isDefaultPrevented()) {
					return;
				}

				if (!activeElement || !nextElement) {
					// some weirdness is happening, so we bail
					return;
				}

				this._isSliding = true;

				if (isCycling) {
					this.pause();
				}

				this._setActiveIndicatorElement(nextElement);

				var slidEvent = $.Event(Event.SLID, {
					relatedTarget: nextElement,
					direction: eventDirectionName
				});

				if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.SLIDE)) {

					$(nextElement).addClass(orderClassName);

					Util.reflow(nextElement);

					$(activeElement).addClass(directionalClassName);
					$(nextElement).addClass(directionalClassName);

					$(activeElement).one(Util.TRANSITION_END, function () {
						$(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);

						$(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);

						_this5._isSliding = false;

						setTimeout(function () {
							return $(_this5._element).trigger(slidEvent);
						}, 0);
					}).emulateTransitionEnd(TRANSITION_DURATION);
				} else {
					$(activeElement).removeClass(ClassName.ACTIVE);
					$(nextElement).addClass(ClassName.ACTIVE);

					this._isSliding = false;
					$(this._element).trigger(slidEvent);
				}

				if (isCycling) {
					this.cycle();
				}
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);
					var _config = $.extend({}, Default, $(this).data());

					if ((typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object') {
						$.extend(_config, config);
					}

					var action = typeof config === 'string' ? config : _config.slide;

					if (!data) {
						data = new Carousel(this, _config);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'number') {
						data.to(config);
					} else if (typeof action === 'string') {
						if (data[action] === undefined) {
							throw new Error("No method named \"" + action + "\"");
						}
						data[action]();
					} else if (_config.interval) {
						data.pause();
						data.cycle();
					}
				});
			}
		}, {
			key: "_dataApiClickHandler",
			value: function _dataApiClickHandler(event) {
				var selector = Util.getSelectorFromElement(this);

				if (!selector) {
					return;
				}

				var target = $(selector)[0];

				if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {
					return;
				}

				var config = $.extend({}, $(target).data(), $(this).data());
				var slideIndex = this.getAttribute('data-slide-to');

				if (slideIndex) {
					config.interval = false;
				}

				Carousel._jQueryInterface.call($(target), config);

				if (slideIndex) {
					$(target).data(DATA_KEY).to(slideIndex);
				}

				event.preventDefault();
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}]);

		return Carousel;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);

	$(window).on(Event.LOAD_DATA_API, function () {
		$(Selector.DATA_RIDE).each(function () {
			var $carousel = $(this);
			Carousel._jQueryInterface.call($carousel, $carousel.data());
		});
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Carousel._jQueryInterface;
	$.fn[NAME].Constructor = Carousel;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Carousel._jQueryInterface;
	};

	return Carousel;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Collapse = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'collapse';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.collapse';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 600;

	var Default = {
		toggle: true,
		parent: ''
	};

	var DefaultType = {
		toggle: 'boolean',
		parent: 'string'
	};

	var Event = {
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		SHOW: 'show',
		COLLAPSE: 'collapse',
		COLLAPSING: 'collapsing',
		COLLAPSED: 'collapsed'
	};

	var Dimension = {
		WIDTH: 'width',
		HEIGHT: 'height'
	};

	var Selector = {
		ACTIVES: '.card > .show, .card > .collapsing',
		DATA_TOGGLE: '[data-toggle="collapse"]'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Collapse = function () {
		function Collapse(element, config) {
			_classCallCheck(this, Collapse);

			this._isTransitioning = false;
			this._element = element;
			this._config = this._getConfig(config);
			this._triggerArray = $.makeArray($("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));

			this._parent = this._config.parent ? this._getParent() : null;

			if (!this._config.parent) {
				this._addAriaAndCollapsedClass(this._element, this._triggerArray);
			}

			if (this._config.toggle) {
				this.toggle();
			}
		}

		// getters

		_createClass(Collapse, [{
			key: "toggle",


			// public

			value: function toggle() {
				if ($(this._element).hasClass(ClassName.SHOW)) {
					this.hide();
				} else {
					this.show();
				}
			}
		}, {
			key: "show",
			value: function show() {
				var _this6 = this;

				if (this._isTransitioning) {
					throw new Error('Collapse is transitioning');
				}

				if ($(this._element).hasClass(ClassName.SHOW)) {
					return;
				}

				var actives = void 0;
				var activesData = void 0;

				if (this._parent) {
					actives = $.makeArray($(this._parent).find(Selector.ACTIVES));
					if (!actives.length) {
						actives = null;
					}
				}

				if (actives) {
					activesData = $(actives).data(DATA_KEY);
					if (activesData && activesData._isTransitioning) {
						return;
					}
				}

				var startEvent = $.Event(Event.SHOW);
				$(this._element).trigger(startEvent);
				if (startEvent.isDefaultPrevented()) {
					return;
				}

				if (actives) {
					Collapse._jQueryInterface.call($(actives), 'hide');
					if (!activesData) {
						$(actives).data(DATA_KEY, null);
					}
				}

				var dimension = this._getDimension();

				$(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);

				this._element.style[dimension] = 0;
				this._element.setAttribute('aria-expanded', true);

				if (this._triggerArray.length) {
					$(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
				}

				this.setTransitioning(true);

				var complete = function complete() {
					$(_this6._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);

					_this6._element.style[dimension] = '';

					_this6.setTransitioning(false);

					$(_this6._element).trigger(Event.SHOWN);
				};

				if (!Util.supportsTransitionEnd()) {
					complete();
					return;
				}

				var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
				var scrollSize = "scroll" + capitalizedDimension;

				$(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);

				this._element.style[dimension] = this._element[scrollSize] + "px";
			}
		}, {
			key: "hide",
			value: function hide() {
				var _this7 = this;

				if (this._isTransitioning) {
					throw new Error('Collapse is transitioning');
				}

				if (!$(this._element).hasClass(ClassName.SHOW)) {
					return;
				}

				var startEvent = $.Event(Event.HIDE);
				$(this._element).trigger(startEvent);
				if (startEvent.isDefaultPrevented()) {
					return;
				}

				var dimension = this._getDimension();
				var offsetDimension = dimension === Dimension.WIDTH ? 'offsetWidth' : 'offsetHeight';

				this._element.style[dimension] = this._element[offsetDimension] + "px";

				Util.reflow(this._element);

				$(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

				this._element.setAttribute('aria-expanded', false);

				if (this._triggerArray.length) {
					$(this._triggerArray).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
				}

				this.setTransitioning(true);

				var complete = function complete() {
					_this7.setTransitioning(false);
					$(_this7._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
				};

				this._element.style[dimension] = '';

				if (!Util.supportsTransitionEnd()) {
					complete();
					return;
				}

				$(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
			}
		}, {
			key: "setTransitioning",
			value: function setTransitioning(isTransitioning) {
				this._isTransitioning = isTransitioning;
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);

				this._config = null;
				this._parent = null;
				this._element = null;
				this._triggerArray = null;
				this._isTransitioning = null;
			}

			// private

		}, {
			key: "_getConfig",
			value: function _getConfig(config) {
				config = $.extend({}, Default, config);
				config.toggle = Boolean(config.toggle); // coerce string values
				Util.typeCheckConfig(NAME, config, DefaultType);
				return config;
			}
		}, {
			key: "_getDimension",
			value: function _getDimension() {
				var hasWidth = $(this._element).hasClass(Dimension.WIDTH);
				return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
			}
		}, {
			key: "_getParent",
			value: function _getParent() {
				var _this8 = this;

				var parent = $(this._config.parent)[0];
				var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";

				$(parent).find(selector).each(function (i, element) {
					_this8._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
				});

				return parent;
			}
		}, {
			key: "_addAriaAndCollapsedClass",
			value: function _addAriaAndCollapsedClass(element, triggerArray) {
				if (element) {
					var isOpen = $(element).hasClass(ClassName.SHOW);
					element.setAttribute('aria-expanded', isOpen);

					if (triggerArray.length) {
						$(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
					}
				}
			}

			// static

		}], [{
			key: "_getTargetFromElement",
			value: function _getTargetFromElement(element) {
				var selector = Util.getSelectorFromElement(element);
				return selector ? $(selector)[0] : null;
			}
		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $this = $(this);
					var data = $this.data(DATA_KEY);
					var _config = $.extend({}, Default, $this.data(), (typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object' && config);

					if (!data && _config.toggle && /show|hide/.test(config)) {
						_config.toggle = false;
					}

					if (!data) {
						data = new Collapse(this, _config);
						$this.data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}]);

		return Collapse;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
		event.preventDefault();

		var target = Collapse._getTargetFromElement(this);
		var data = $(target).data(DATA_KEY);
		var config = data ? 'toggle' : $(this).data();

		Collapse._jQueryInterface.call($(target), config);
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Collapse._jQueryInterface;
	$.fn[NAME].Constructor = Collapse;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Collapse._jQueryInterface;
	};

	return Collapse;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Dropdown = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'dropdown';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.dropdown';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key
	var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key
	var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key
	var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

	var Event = {
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		CLICK: "click" + EVENT_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
		FOCUSIN_DATA_API: "focusin" + EVENT_KEY + DATA_API_KEY,
		KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		BACKDROP: 'dropdown-backdrop',
		DISABLED: 'disabled',
		SHOW: 'show'
	};

	var Selector = {
		BACKDROP: '.dropdown-backdrop',
		DATA_TOGGLE: '[data-toggle="dropdown"]',
		FORM_CHILD: '.dropdown form',
		ROLE_MENU: '[role="menu"]',
		ROLE_LISTBOX: '[role="listbox"]',
		NAVBAR_NAV: '.navbar-nav',
		VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, ' + '[role="listbox"] li:not(.disabled) a'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Dropdown = function () {
		function Dropdown(element) {
			_classCallCheck(this, Dropdown);

			this._element = element;

			this._addEventListeners();
		}

		// getters

		_createClass(Dropdown, [{
			key: "toggle",


			// public

			value: function toggle() {
				if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {
					return false;
				}

				var parent = Dropdown._getParentFromElement(this);
				var isActive = $(parent).hasClass(ClassName.SHOW);

				Dropdown._clearMenus();

				if (isActive) {
					return false;
				}

				if ('ontouchstart' in document.documentElement && !$(parent).closest(Selector.NAVBAR_NAV).length) {

					// if mobile we use a backdrop because click events don't delegate
					var dropdown = document.createElement('div');
					dropdown.className = ClassName.BACKDROP;
					$(dropdown).insertBefore(this);
					$(dropdown).on('click', Dropdown._clearMenus);
				}

				var relatedTarget = {
					relatedTarget: this
				};
				var showEvent = $.Event(Event.SHOW, relatedTarget);

				$(parent).trigger(showEvent);

				if (showEvent.isDefaultPrevented()) {
					return false;
				}

				this.focus();
				this.setAttribute('aria-expanded', true);

				$(parent).toggleClass(ClassName.SHOW);
				$(parent).trigger($.Event(Event.SHOWN, relatedTarget));

				return false;
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);
				$(this._element).off(EVENT_KEY);
				this._element = null;
			}

			// private

		}, {
			key: "_addEventListeners",
			value: function _addEventListeners() {
				$(this._element).on(Event.CLICK, this.toggle);
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);

					if (!data) {
						data = new Dropdown(this);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config].call(this);
					}
				});
			}
		}, {
			key: "_clearMenus",
			value: function _clearMenus(event) {
				if (event && event.which === RIGHT_MOUSE_BUTTON_WHICH) {
					return;
				}

				var backdrop = $(Selector.BACKDROP)[0];
				if (backdrop) {
					backdrop.parentNode.removeChild(backdrop);
				}

				var toggles = $.makeArray($(Selector.DATA_TOGGLE));

				for (var i = 0; i < toggles.length; i++) {
					var parent = Dropdown._getParentFromElement(toggles[i]);
					var relatedTarget = {
						relatedTarget: toggles[i]
					};

					if (!$(parent).hasClass(ClassName.SHOW)) {
						continue;
					}

					if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'focusin') && $.contains(parent, event.target)) {
						continue;
					}

					var hideEvent = $.Event(Event.HIDE, relatedTarget);
					$(parent).trigger(hideEvent);
					if (hideEvent.isDefaultPrevented()) {
						continue;
					}

					toggles[i].setAttribute('aria-expanded', 'false');

					$(parent).removeClass(ClassName.SHOW).trigger($.Event(Event.HIDDEN, relatedTarget));
				}
			}
		}, {
			key: "_getParentFromElement",
			value: function _getParentFromElement(element) {
				var parent = void 0;
				var selector = Util.getSelectorFromElement(element);

				if (selector) {
					parent = $(selector)[0];
				}

				return parent || element.parentNode;
			}
		}, {
			key: "_dataApiKeydownHandler",
			value: function _dataApiKeydownHandler(event) {
				if (!/(38|40|27|32)/.test(event.which) || /input|textarea/i.test(event.target.tagName)) {
					return;
				}

				event.preventDefault();
				event.stopPropagation();

				if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {
					return;
				}

				var parent = Dropdown._getParentFromElement(this);
				var isActive = $(parent).hasClass(ClassName.SHOW);

				if (!isActive && event.which !== ESCAPE_KEYCODE || isActive && event.which === ESCAPE_KEYCODE) {

					if (event.which === ESCAPE_KEYCODE) {
						var toggle = $(parent).find(Selector.DATA_TOGGLE)[0];
						$(toggle).trigger('focus');
					}

					$(this).trigger('click');
					return;
				}

				var items = $(parent).find(Selector.VISIBLE_ITEMS).get();

				if (!items.length) {
					return;
				}

				var index = items.indexOf(event.target);

				if (event.which === ARROW_UP_KEYCODE && index > 0) {
					// up
					index--;
				}

				if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
					// down
					index++;
				}

				if (index < 0) {
					index = 0;
				}

				items[index].focus();
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}]);

		return Dropdown;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_MENU, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_LISTBOX, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.FOCUSIN_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, Dropdown.prototype.toggle).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
		e.stopPropagation();
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Dropdown._jQueryInterface;
	$.fn[NAME].Constructor = Dropdown;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Dropdown._jQueryInterface;
	};

	return Dropdown;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Modal = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'modal';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.modal';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 300;
	var BACKDROP_TRANSITION_DURATION = 150;
	var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

	var Default = {
		backdrop: true,
		keyboard: true,
		focus: true,
		show: true
	};

	var DefaultType = {
		backdrop: '(boolean|string)',
		keyboard: 'boolean',
		focus: 'boolean',
		show: 'boolean'
	};

	var Event = {
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		FOCUSIN: "focusin" + EVENT_KEY,
		RESIZE: "resize" + EVENT_KEY,
		CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
		KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
		MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
		MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
		BACKDROP: 'modal-backdrop',
		OPEN: 'modal-open',
		FADE: 'fade',
		SHOW: 'show'
	};

	var Selector = {
		DIALOG: '.modal-dialog',
		DATA_TOGGLE: '[data-toggle="modal"]',
		DATA_DISMISS: '[data-dismiss="modal"]',
		FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Modal = function () {
		function Modal(element, config) {
			_classCallCheck(this, Modal);

			this._config = this._getConfig(config);
			this._element = element;
			this._dialog = $(element).find(Selector.DIALOG)[0];
			this._backdrop = null;
			this._isShown = false;
			this._isBodyOverflowing = false;
			this._ignoreBackdropClick = false;
			this._isTransitioning = false;
			this._originalBodyPadding = 0;
			this._scrollbarWidth = 0;
		}

		// getters

		_createClass(Modal, [{
			key: "toggle",


			// public

			value: function toggle(relatedTarget) {
				return this._isShown ? this.hide() : this.show(relatedTarget);
			}
		}, {
			key: "show",
			value: function show(relatedTarget) {
				var _this9 = this;

				if (this._isTransitioning) {
					throw new Error('Modal is transitioning');
				}

				if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {
					this._isTransitioning = true;
				}
				var showEvent = $.Event(Event.SHOW, {
					relatedTarget: relatedTarget
				});

				$(this._element).trigger(showEvent);

				if (this._isShown || showEvent.isDefaultPrevented()) {
					return;
				}

				this._isShown = true;

				this._checkScrollbar();
				this._setScrollbar();

				$(document.body).addClass(ClassName.OPEN);

				this._setEscapeEvent();
				this._setResizeEvent();

				$(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
					return _this9.hide(event);
				});

				$(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
					$(_this9._element).one(Event.MOUSEUP_DISMISS, function (event) {
						if ($(event.target).is(_this9._element)) {
							_this9._ignoreBackdropClick = true;
						}
					});
				});

				this._showBackdrop(function () {
					return _this9._showElement(relatedTarget);
				});
			}
		}, {
			key: "hide",
			value: function hide(event) {
				var _this10 = this;

				if (event) {
					event.preventDefault();
				}

				if (this._isTransitioning) {
					throw new Error('Modal is transitioning');
				}

				var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);
				if (transition) {
					this._isTransitioning = true;
				}

				var hideEvent = $.Event(Event.HIDE);
				$(this._element).trigger(hideEvent);

				if (!this._isShown || hideEvent.isDefaultPrevented()) {
					return;
				}

				this._isShown = false;

				this._setEscapeEvent();
				this._setResizeEvent();

				$(document).off(Event.FOCUSIN);

				$(this._element).removeClass(ClassName.SHOW);

				$(this._element).off(Event.CLICK_DISMISS);
				$(this._dialog).off(Event.MOUSEDOWN_DISMISS);

				if (transition) {
					$(this._element).one(Util.TRANSITION_END, function (event) {
						return _this10._hideModal(event);
					}).emulateTransitionEnd(TRANSITION_DURATION);
				} else {
					this._hideModal();
				}
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);

				$(window, document, this._element, this._backdrop).off(EVENT_KEY);

				this._config = null;
				this._element = null;
				this._dialog = null;
				this._backdrop = null;
				this._isShown = null;
				this._isBodyOverflowing = null;
				this._ignoreBackdropClick = null;
				this._originalBodyPadding = null;
				this._scrollbarWidth = null;
			}

			// private

		}, {
			key: "_getConfig",
			value: function _getConfig(config) {
				config = $.extend({}, Default, config);
				Util.typeCheckConfig(NAME, config, DefaultType);
				return config;
			}
		}, {
			key: "_showElement",
			value: function _showElement(relatedTarget) {
				var _this11 = this;

				var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);

				if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
					// don't move modals dom position
					document.body.appendChild(this._element);
				}

				this._element.style.display = 'block';
				this._element.removeAttribute('aria-hidden');
				this._element.scrollTop = 0;

				if (transition) {
					Util.reflow(this._element);
				}

				$(this._element).addClass(ClassName.SHOW);

				if (this._config.focus) {
					this._enforceFocus();
				}

				var shownEvent = $.Event(Event.SHOWN, {
					relatedTarget: relatedTarget
				});

				var transitionComplete = function transitionComplete() {
					if (_this11._config.focus) {
						_this11._element.focus();
					}
					_this11._isTransitioning = false;
					$(_this11._element).trigger(shownEvent);
				};

				if (transition) {
					$(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
				} else {
					transitionComplete();
				}
			}
		}, {
			key: "_enforceFocus",
			value: function _enforceFocus() {
				var _this12 = this;

				$(document).off(Event.FOCUSIN) // guard against infinite focus loop
				.on(Event.FOCUSIN, function (event) {
					if (document !== event.target && _this12._element !== event.target && !$(_this12._element).has(event.target).length) {
						_this12._element.focus();
					}
				});
			}
		}, {
			key: "_setEscapeEvent",
			value: function _setEscapeEvent() {
				var _this13 = this;

				if (this._isShown && this._config.keyboard) {
					$(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
						if (event.which === ESCAPE_KEYCODE) {
							_this13.hide();
						}
					});
				} else if (!this._isShown) {
					$(this._element).off(Event.KEYDOWN_DISMISS);
				}
			}
		}, {
			key: "_setResizeEvent",
			value: function _setResizeEvent() {
				var _this14 = this;

				if (this._isShown) {
					$(window).on(Event.RESIZE, function (event) {
						return _this14._handleUpdate(event);
					});
				} else {
					$(window).off(Event.RESIZE);
				}
			}
		}, {
			key: "_hideModal",
			value: function _hideModal() {
				var _this15 = this;

				this._element.style.display = 'none';
				this._element.setAttribute('aria-hidden', 'true');
				this._isTransitioning = false;
				this._showBackdrop(function () {
					$(document.body).removeClass(ClassName.OPEN);
					_this15._resetAdjustments();
					_this15._resetScrollbar();
					$(_this15._element).trigger(Event.HIDDEN);
				});
			}
		}, {
			key: "_removeBackdrop",
			value: function _removeBackdrop() {
				if (this._backdrop) {
					$(this._backdrop).remove();
					this._backdrop = null;
				}
			}
		}, {
			key: "_showBackdrop",
			value: function _showBackdrop(callback) {
				var _this16 = this;

				var animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

				if (this._isShown && this._config.backdrop) {
					var doAnimate = Util.supportsTransitionEnd() && animate;

					this._backdrop = document.createElement('div');
					this._backdrop.className = ClassName.BACKDROP;

					if (animate) {
						$(this._backdrop).addClass(animate);
					}

					$(this._backdrop).appendTo(document.body);

					$(this._element).on(Event.CLICK_DISMISS, function (event) {
						if (_this16._ignoreBackdropClick) {
							_this16._ignoreBackdropClick = false;
							return;
						}
						if (event.target !== event.currentTarget) {
							return;
						}
						if (_this16._config.backdrop === 'static') {
							_this16._element.focus();
						} else {
							_this16.hide();
						}
					});

					if (doAnimate) {
						Util.reflow(this._backdrop);
					}

					$(this._backdrop).addClass(ClassName.SHOW);

					if (!callback) {
						return;
					}

					if (!doAnimate) {
						callback();
						return;
					}

					$(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
				} else if (!this._isShown && this._backdrop) {
					$(this._backdrop).removeClass(ClassName.SHOW);

					var callbackRemove = function callbackRemove() {
						_this16._removeBackdrop();
						if (callback) {
							callback();
						}
					};

					if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {
						$(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
					} else {
						callbackRemove();
					}
				} else if (callback) {
					callback();
				}
			}

			// ----------------------------------------------------------------------
			// the following methods are used to handle overflowing modals
			// todo (fat): these should probably be refactored out of modal.js
			// ----------------------------------------------------------------------

		}, {
			key: "_handleUpdate",
			value: function _handleUpdate() {
				this._adjustDialog();
			}
		}, {
			key: "_adjustDialog",
			value: function _adjustDialog() {
				var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

				if (!this._isBodyOverflowing && isModalOverflowing) {
					this._element.style.paddingLeft = this._scrollbarWidth + "px";
				}

				if (this._isBodyOverflowing && !isModalOverflowing) {
					this._element.style.paddingRight = this._scrollbarWidth + "px";
				}
			}
		}, {
			key: "_resetAdjustments",
			value: function _resetAdjustments() {
				this._element.style.paddingLeft = '';
				this._element.style.paddingRight = '';
			}
		}, {
			key: "_checkScrollbar",
			value: function _checkScrollbar() {
				this._isBodyOverflowing = document.body.clientWidth < window.innerWidth;
				this._scrollbarWidth = this._getScrollbarWidth();
			}
		}, {
			key: "_setScrollbar",
			value: function _setScrollbar() {
				var bodyPadding = parseInt($(Selector.FIXED_CONTENT).css('padding-right') || 0, 10);

				this._originalBodyPadding = document.body.style.paddingRight || '';

				if (this._isBodyOverflowing) {
					document.body.style.paddingRight = bodyPadding + this._scrollbarWidth + "px";
				}
			}
		}, {
			key: "_resetScrollbar",
			value: function _resetScrollbar() {
				document.body.style.paddingRight = this._originalBodyPadding;
			}
		}, {
			key: "_getScrollbarWidth",
			value: function _getScrollbarWidth() {
				// thx d.walsh
				var scrollDiv = document.createElement('div');
				scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
				document.body.appendChild(scrollDiv);
				var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
				return scrollbarWidth;
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config, relatedTarget) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);
					var _config = $.extend({}, Modal.Default, $(this).data(), (typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object' && config);

					if (!data) {
						data = new Modal(this, _config);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config](relatedTarget);
					} else if (_config.show) {
						data.show(relatedTarget);
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}]);

		return Modal;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
		var _this17 = this;

		var target = void 0;
		var selector = Util.getSelectorFromElement(this);

		if (selector) {
			target = $(selector)[0];
		}

		var config = $(target).data(DATA_KEY) ? 'toggle' : $.extend({}, $(target).data(), $(this).data());

		if (this.tagName === 'A' || this.tagName === 'AREA') {
			event.preventDefault();
		}

		var $target = $(target).one(Event.SHOW, function (showEvent) {
			if (showEvent.isDefaultPrevented()) {
				// only register focus restorer if modal will actually get shown
				return;
			}

			$target.one(Event.HIDDEN, function () {
				if ($(_this17).is(':visible')) {
					_this17.focus();
				}
			});
		});

		Modal._jQueryInterface.call($(target), config, this);
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Modal._jQueryInterface;
	$.fn[NAME].Constructor = Modal;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Modal._jQueryInterface;
	};

	return Modal;
}(jQuery);

/* global Tether */

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tooltip = function ($) {

	/**
  * Check for Tether dependency
  * Tether - http://tether.io/
  */
	if (typeof Tether === 'undefined') {
		throw new Error('Bootstrap tooltips require Tether (http://tether.io/)');
	}

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'tooltip';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.tooltip';
	var EVENT_KEY = "." + DATA_KEY;
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 150;
	var CLASS_PREFIX = 'bs-tether';

	var Default = {
		animation: true,
		template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-inner"></div></div>',
		trigger: 'hover focus',
		title: '',
		delay: 0,
		html: false,
		selector: false,
		placement: 'top',
		offset: '0 0',
		constraints: [],
		container: false
	};

	var DefaultType = {
		animation: 'boolean',
		template: 'string',
		title: '(string|element|function)',
		trigger: 'string',
		delay: '(number|object)',
		html: 'boolean',
		selector: '(string|boolean)',
		placement: '(string|function)',
		offset: 'string',
		constraints: 'array',
		container: '(string|element|boolean)'
	};

	var AttachmentMap = {
		TOP: 'bottom center',
		RIGHT: 'middle left',
		BOTTOM: 'top center',
		LEFT: 'middle right'
	};

	var HoverState = {
		SHOW: 'show',
		OUT: 'out'
	};

	var Event = {
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		INSERTED: "inserted" + EVENT_KEY,
		CLICK: "click" + EVENT_KEY,
		FOCUSIN: "focusin" + EVENT_KEY,
		FOCUSOUT: "focusout" + EVENT_KEY,
		MOUSEENTER: "mouseenter" + EVENT_KEY,
		MOUSELEAVE: "mouseleave" + EVENT_KEY
	};

	var ClassName = {
		FADE: 'fade',
		SHOW: 'show'
	};

	var Selector = {
		TOOLTIP: '.tooltip',
		TOOLTIP_INNER: '.tooltip-inner'
	};

	var TetherClass = {
		element: false,
		enabled: false
	};

	var Trigger = {
		HOVER: 'hover',
		FOCUS: 'focus',
		CLICK: 'click',
		MANUAL: 'manual'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Tooltip = function () {
		function Tooltip(element, config) {
			_classCallCheck(this, Tooltip);

			// private
			this._isEnabled = true;
			this._timeout = 0;
			this._hoverState = '';
			this._activeTrigger = {};
			this._isTransitioning = false;
			this._tether = null;

			// protected
			this.element = element;
			this.config = this._getConfig(config);
			this.tip = null;

			this._setListeners();
		}

		// getters

		_createClass(Tooltip, [{
			key: "enable",


			// public

			value: function enable() {
				this._isEnabled = true;
			}
		}, {
			key: "disable",
			value: function disable() {
				this._isEnabled = false;
			}
		}, {
			key: "toggleEnabled",
			value: function toggleEnabled() {
				this._isEnabled = !this._isEnabled;
			}
		}, {
			key: "toggle",
			value: function toggle(event) {
				if (event) {
					var dataKey = this.constructor.DATA_KEY;
					var context = $(event.currentTarget).data(dataKey);

					if (!context) {
						context = new this.constructor(event.currentTarget, this._getDelegateConfig());
						$(event.currentTarget).data(dataKey, context);
					}

					context._activeTrigger.click = !context._activeTrigger.click;

					if (context._isWithActiveTrigger()) {
						context._enter(null, context);
					} else {
						context._leave(null, context);
					}
				} else {

					if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {
						this._leave(null, this);
						return;
					}

					this._enter(null, this);
				}
			}
		}, {
			key: "dispose",
			value: function dispose() {
				clearTimeout(this._timeout);

				this.cleanupTether();

				$.removeData(this.element, this.constructor.DATA_KEY);

				$(this.element).off(this.constructor.EVENT_KEY);
				$(this.element).closest('.modal').off('hide.bs.modal');

				if (this.tip) {
					$(this.tip).remove();
				}

				this._isEnabled = null;
				this._timeout = null;
				this._hoverState = null;
				this._activeTrigger = null;
				this._tether = null;

				this.element = null;
				this.config = null;
				this.tip = null;
			}
		}, {
			key: "show",
			value: function show() {
				var _this18 = this;

				if ($(this.element).css('display') === 'none') {
					throw new Error('Please use show on visible elements');
				}

				var showEvent = $.Event(this.constructor.Event.SHOW);
				if (this.isWithContent() && this._isEnabled) {
					if (this._isTransitioning) {
						throw new Error('Tooltip is transitioning');
					}
					$(this.element).trigger(showEvent);

					var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);

					if (showEvent.isDefaultPrevented() || !isInTheDom) {
						return;
					}

					var tip = this.getTipElement();
					var tipId = Util.getUID(this.constructor.NAME);

					tip.setAttribute('id', tipId);
					this.element.setAttribute('aria-describedby', tipId);

					this.setContent();

					if (this.config.animation) {
						$(tip).addClass(ClassName.FADE);
					}

					var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

					var attachment = this._getAttachment(placement);

					var container = this.config.container === false ? document.body : $(this.config.container);

					$(tip).data(this.constructor.DATA_KEY, this).appendTo(container);

					$(this.element).trigger(this.constructor.Event.INSERTED);

					this._tether = new Tether({
						attachment: attachment,
						element: tip,
						target: this.element,
						classes: TetherClass,
						classPrefix: CLASS_PREFIX,
						offset: this.config.offset,
						constraints: this.config.constraints,
						addTargetClasses: false
					});

					Util.reflow(tip);
					this._tether.position();

					$(tip).addClass(ClassName.SHOW);

					var complete = function complete() {
						var prevHoverState = _this18._hoverState;
						_this18._hoverState = null;
						_this18._isTransitioning = false;

						$(_this18.element).trigger(_this18.constructor.Event.SHOWN);

						if (prevHoverState === HoverState.OUT) {
							_this18._leave(null, _this18);
						}
					};

					if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {
						this._isTransitioning = true;
						$(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
						return;
					}

					complete();
				}
			}
		}, {
			key: "hide",
			value: function hide(callback) {
				var _this19 = this;

				var tip = this.getTipElement();
				var hideEvent = $.Event(this.constructor.Event.HIDE);
				if (this._isTransitioning) {
					throw new Error('Tooltip is transitioning');
				}
				var complete = function complete() {
					if (_this19._hoverState !== HoverState.SHOW && tip.parentNode) {
						tip.parentNode.removeChild(tip);
					}

					_this19.element.removeAttribute('aria-describedby');
					$(_this19.element).trigger(_this19.constructor.Event.HIDDEN);
					_this19._isTransitioning = false;
					_this19.cleanupTether();

					if (callback) {
						callback();
					}
				};

				$(this.element).trigger(hideEvent);

				if (hideEvent.isDefaultPrevented()) {
					return;
				}

				$(tip).removeClass(ClassName.SHOW);

				this._activeTrigger[Trigger.CLICK] = false;
				this._activeTrigger[Trigger.FOCUS] = false;
				this._activeTrigger[Trigger.HOVER] = false;

				if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {
					this._isTransitioning = true;
					$(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
				} else {
					complete();
				}

				this._hoverState = '';
			}

			// protected

		}, {
			key: "isWithContent",
			value: function isWithContent() {
				return Boolean(this.getTitle());
			}
		}, {
			key: "getTipElement",
			value: function getTipElement() {
				return this.tip = this.tip || $(this.config.template)[0];
			}
		}, {
			key: "setContent",
			value: function setContent() {
				var $tip = $(this.getTipElement());

				this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());

				$tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);

				this.cleanupTether();
			}
		}, {
			key: "setElementContent",
			value: function setElementContent($element, content) {
				var html = this.config.html;
				if ((typeof content === "undefined" ? "undefined" : _typeof(content)) === 'object' && (content.nodeType || content.jquery)) {
					// content is a DOM node or a jQuery
					if (html) {
						if (!$(content).parent().is($element)) {
							$element.empty().append(content);
						}
					} else {
						$element.text($(content).text());
					}
				} else {
					$element[html ? 'html' : 'text'](content);
				}
			}
		}, {
			key: "getTitle",
			value: function getTitle() {
				var title = this.element.getAttribute('data-original-title');

				if (!title) {
					title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
				}

				return title;
			}
		}, {
			key: "cleanupTether",
			value: function cleanupTether() {
				if (this._tether) {
					this._tether.destroy();
				}
			}

			// private

		}, {
			key: "_getAttachment",
			value: function _getAttachment(placement) {
				return AttachmentMap[placement.toUpperCase()];
			}
		}, {
			key: "_setListeners",
			value: function _setListeners() {
				var _this20 = this;

				var triggers = this.config.trigger.split(' ');

				triggers.forEach(function (trigger) {
					if (trigger === 'click') {
						$(_this20.element).on(_this20.constructor.Event.CLICK, _this20.config.selector, function (event) {
							return _this20.toggle(event);
						});
					} else if (trigger !== Trigger.MANUAL) {
						var eventIn = trigger === Trigger.HOVER ? _this20.constructor.Event.MOUSEENTER : _this20.constructor.Event.FOCUSIN;
						var eventOut = trigger === Trigger.HOVER ? _this20.constructor.Event.MOUSELEAVE : _this20.constructor.Event.FOCUSOUT;

						$(_this20.element).on(eventIn, _this20.config.selector, function (event) {
							return _this20._enter(event);
						}).on(eventOut, _this20.config.selector, function (event) {
							return _this20._leave(event);
						});
					}

					$(_this20.element).closest('.modal').on('hide.bs.modal', function () {
						return _this20.hide();
					});
				});

				if (this.config.selector) {
					this.config = $.extend({}, this.config, {
						trigger: 'manual',
						selector: ''
					});
				} else {
					this._fixTitle();
				}
			}
		}, {
			key: "_fixTitle",
			value: function _fixTitle() {
				var titleType = _typeof(this.element.getAttribute('data-original-title'));
				if (this.element.getAttribute('title') || titleType !== 'string') {
					this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
					this.element.setAttribute('title', '');
				}
			}
		}, {
			key: "_enter",
			value: function _enter(event, context) {
				var dataKey = this.constructor.DATA_KEY;

				context = context || $(event.currentTarget).data(dataKey);

				if (!context) {
					context = new this.constructor(event.currentTarget, this._getDelegateConfig());
					$(event.currentTarget).data(dataKey, context);
				}

				if (event) {
					context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
				}

				if ($(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
					context._hoverState = HoverState.SHOW;
					return;
				}

				clearTimeout(context._timeout);

				context._hoverState = HoverState.SHOW;

				if (!context.config.delay || !context.config.delay.show) {
					context.show();
					return;
				}

				context._timeout = setTimeout(function () {
					if (context._hoverState === HoverState.SHOW) {
						context.show();
					}
				}, context.config.delay.show);
			}
		}, {
			key: "_leave",
			value: function _leave(event, context) {
				var dataKey = this.constructor.DATA_KEY;

				context = context || $(event.currentTarget).data(dataKey);

				if (!context) {
					context = new this.constructor(event.currentTarget, this._getDelegateConfig());
					$(event.currentTarget).data(dataKey, context);
				}

				if (event) {
					context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
				}

				if (context._isWithActiveTrigger()) {
					return;
				}

				clearTimeout(context._timeout);

				context._hoverState = HoverState.OUT;

				if (!context.config.delay || !context.config.delay.hide) {
					context.hide();
					return;
				}

				context._timeout = setTimeout(function () {
					if (context._hoverState === HoverState.OUT) {
						context.hide();
					}
				}, context.config.delay.hide);
			}
		}, {
			key: "_isWithActiveTrigger",
			value: function _isWithActiveTrigger() {
				for (var trigger in this._activeTrigger) {
					if (this._activeTrigger[trigger]) {
						return true;
					}
				}

				return false;
			}
		}, {
			key: "_getConfig",
			value: function _getConfig(config) {
				config = $.extend({}, this.constructor.Default, $(this.element).data(), config);

				if (config.delay && typeof config.delay === 'number') {
					config.delay = {
						show: config.delay,
						hide: config.delay
					};
				}

				Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);

				return config;
			}
		}, {
			key: "_getDelegateConfig",
			value: function _getDelegateConfig() {
				var config = {};

				if (this.config) {
					for (var key in this.config) {
						if (this.constructor.Default[key] !== this.config[key]) {
							config[key] = this.config[key];
						}
					}
				}

				return config;
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);
					var _config = (typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object' && config;

					if (!data && /dispose|hide/.test(config)) {
						return;
					}

					if (!data) {
						data = new Tooltip(this, _config);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}, {
			key: "NAME",
			get: function get() {
				return NAME;
			}
		}, {
			key: "DATA_KEY",
			get: function get() {
				return DATA_KEY;
			}
		}, {
			key: "Event",
			get: function get() {
				return Event;
			}
		}, {
			key: "EVENT_KEY",
			get: function get() {
				return EVENT_KEY;
			}
		}, {
			key: "DefaultType",
			get: function get() {
				return DefaultType;
			}
		}]);

		return Tooltip;
	}();

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Tooltip._jQueryInterface;
	$.fn[NAME].Constructor = Tooltip;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Tooltip._jQueryInterface;
	};

	return Tooltip;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Popover = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'popover';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.popover';
	var EVENT_KEY = "." + DATA_KEY;
	var JQUERY_NO_CONFLICT = $.fn[NAME];

	var Default = $.extend({}, Tooltip.Default, {
		placement: 'right',
		trigger: 'click',
		content: '',
		template: '<div class="popover" role="tooltip">' + '<h3 class="popover-title"></h3>' + '<div class="popover-content"></div></div>'
	});

	var DefaultType = $.extend({}, Tooltip.DefaultType, {
		content: '(string|element|function)'
	});

	var ClassName = {
		FADE: 'fade',
		SHOW: 'show'
	};

	var Selector = {
		TITLE: '.popover-title',
		CONTENT: '.popover-content'
	};

	var Event = {
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		INSERTED: "inserted" + EVENT_KEY,
		CLICK: "click" + EVENT_KEY,
		FOCUSIN: "focusin" + EVENT_KEY,
		FOCUSOUT: "focusout" + EVENT_KEY,
		MOUSEENTER: "mouseenter" + EVENT_KEY,
		MOUSELEAVE: "mouseleave" + EVENT_KEY
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Popover = function (_Tooltip) {
		_inherits(Popover, _Tooltip);

		function Popover() {
			_classCallCheck(this, Popover);

			return _possibleConstructorReturn(this, (Popover.__proto__ || Object.getPrototypeOf(Popover)).apply(this, arguments));
		}

		_createClass(Popover, [{
			key: "isWithContent",


			// overrides

			value: function isWithContent() {
				return this.getTitle() || this._getContent();
			}
		}, {
			key: "getTipElement",
			value: function getTipElement() {
				return this.tip = this.tip || $(this.config.template)[0];
			}
		}, {
			key: "setContent",
			value: function setContent() {
				var $tip = $(this.getTipElement());

				// we use append for html objects to maintain js events
				this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
				this.setElementContent($tip.find(Selector.CONTENT), this._getContent());

				$tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);

				this.cleanupTether();
			}

			// private

		}, {
			key: "_getContent",
			value: function _getContent() {
				return this.element.getAttribute('data-content') || (typeof this.config.content === 'function' ? this.config.content.call(this.element) : this.config.content);
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);
					var _config = (typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object' ? config : null;

					if (!data && /destroy|hide/.test(config)) {
						return;
					}

					if (!data) {
						data = new Popover(this, _config);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",


			// getters

			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}, {
			key: "NAME",
			get: function get() {
				return NAME;
			}
		}, {
			key: "DATA_KEY",
			get: function get() {
				return DATA_KEY;
			}
		}, {
			key: "Event",
			get: function get() {
				return Event;
			}
		}, {
			key: "EVENT_KEY",
			get: function get() {
				return EVENT_KEY;
			}
		}, {
			key: "DefaultType",
			get: function get() {
				return DefaultType;
			}
		}]);

		return Popover;
	}(Tooltip);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Popover._jQueryInterface;
	$.fn[NAME].Constructor = Popover;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Popover._jQueryInterface;
	};

	return Popover;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var ScrollSpy = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'scrollspy';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.scrollspy';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];

	var Default = {
		offset: 10,
		method: 'auto',
		target: ''
	};

	var DefaultType = {
		offset: 'number',
		method: 'string',
		target: '(string|element)'
	};

	var Event = {
		ACTIVATE: "activate" + EVENT_KEY,
		SCROLL: "scroll" + EVENT_KEY,
		LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		DROPDOWN_ITEM: 'dropdown-item',
		DROPDOWN_MENU: 'dropdown-menu',
		NAV_LINK: 'nav-link',
		NAV: 'nav',
		ACTIVE: 'active'
	};

	var Selector = {
		DATA_SPY: '[data-spy="scroll"]',
		ACTIVE: '.active',
		LIST_ITEM: '.list-item',
		LI: 'li',
		LI_DROPDOWN: 'li.dropdown',
		NAV_LINKS: '.nav-link',
		DROPDOWN: '.dropdown',
		DROPDOWN_ITEMS: '.dropdown-item',
		DROPDOWN_TOGGLE: '.dropdown-toggle'
	};

	var OffsetMethod = {
		OFFSET: 'offset',
		POSITION: 'position'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var ScrollSpy = function () {
		function ScrollSpy(element, config) {
			var _this22 = this;

			_classCallCheck(this, ScrollSpy);

			this._element = element;
			this._scrollElement = element.tagName === 'BODY' ? window : element;
			this._config = this._getConfig(config);
			this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
			this._offsets = [];
			this._targets = [];
			this._activeTarget = null;
			this._scrollHeight = 0;

			$(this._scrollElement).on(Event.SCROLL, function (event) {
				return _this22._process(event);
			});

			this.refresh();
			this._process();
		}

		// getters

		_createClass(ScrollSpy, [{
			key: "refresh",


			// public

			value: function refresh() {
				var _this23 = this;

				var autoMethod = this._scrollElement !== this._scrollElement.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;

				var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;

				var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;

				this._offsets = [];
				this._targets = [];

				this._scrollHeight = this._getScrollHeight();

				var targets = $.makeArray($(this._selector));

				targets.map(function (element) {
					var target = void 0;
					var targetSelector = Util.getSelectorFromElement(element);

					if (targetSelector) {
						target = $(targetSelector)[0];
					}

					if (target && (target.offsetWidth || target.offsetHeight)) {
						// todo (fat): remove sketch reliance on jQuery position/offset
						return [$(target)[offsetMethod]().top + offsetBase, targetSelector];
					}
					return null;
				}).filter(function (item) {
					return item;
				}).sort(function (a, b) {
					return a[0] - b[0];
				}).forEach(function (item) {
					_this23._offsets.push(item[0]);
					_this23._targets.push(item[1]);
				});
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeData(this._element, DATA_KEY);
				$(this._scrollElement).off(EVENT_KEY);

				this._element = null;
				this._scrollElement = null;
				this._config = null;
				this._selector = null;
				this._offsets = null;
				this._targets = null;
				this._activeTarget = null;
				this._scrollHeight = null;
			}

			// private

		}, {
			key: "_getConfig",
			value: function _getConfig(config) {
				config = $.extend({}, Default, config);

				if (typeof config.target !== 'string') {
					var id = $(config.target).attr('id');
					if (!id) {
						id = Util.getUID(NAME);
						$(config.target).attr('id', id);
					}
					config.target = "#" + id;
				}

				Util.typeCheckConfig(NAME, config, DefaultType);

				return config;
			}
		}, {
			key: "_getScrollTop",
			value: function _getScrollTop() {
				return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
			}
		}, {
			key: "_getScrollHeight",
			value: function _getScrollHeight() {
				return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
			}
		}, {
			key: "_getOffsetHeight",
			value: function _getOffsetHeight() {
				return this._scrollElement === window ? window.innerHeight : this._scrollElement.offsetHeight;
			}
		}, {
			key: "_process",
			value: function _process() {
				var scrollTop = this._getScrollTop() + this._config.offset;
				var scrollHeight = this._getScrollHeight();
				var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

				if (this._scrollHeight !== scrollHeight) {
					this.refresh();
				}

				if (scrollTop >= maxScroll) {
					var target = this._targets[this._targets.length - 1];

					if (this._activeTarget !== target) {
						this._activate(target);
					}
					return;
				}

				if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
					this._activeTarget = null;
					this._clear();
					return;
				}

				for (var i = this._offsets.length; i--;) {
					var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (this._offsets[i + 1] === undefined || scrollTop < this._offsets[i + 1]);

					if (isActiveTarget) {
						this._activate(this._targets[i]);
					}
				}
			}
		}, {
			key: "_activate",
			value: function _activate(target) {
				this._activeTarget = target;

				this._clear();

				var queries = this._selector.split(',');
				queries = queries.map(function (selector) {
					return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
				});

				var $link = $(queries.join(','));

				if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
					$link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
					$link.addClass(ClassName.ACTIVE);
				} else {
					// todo (fat) this is kinda sus...
					// recursively add actives to tested nav-links
					$link.parents(Selector.LI).find("> " + Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
				}

				$(this._scrollElement).trigger(Event.ACTIVATE, {
					relatedTarget: target
				});
			}
		}, {
			key: "_clear",
			value: function _clear() {
				$(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var data = $(this).data(DATA_KEY);
					var _config = (typeof config === "undefined" ? "undefined" : _typeof(config)) === 'object' && config;

					if (!data) {
						data = new ScrollSpy(this, _config);
						$(this).data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}, {
			key: "Default",
			get: function get() {
				return Default;
			}
		}]);

		return ScrollSpy;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(window).on(Event.LOAD_DATA_API, function () {
		var scrollSpys = $.makeArray($(Selector.DATA_SPY));

		for (var i = scrollSpys.length; i--;) {
			var $spy = $(scrollSpys[i]);
			ScrollSpy._jQueryInterface.call($spy, $spy.data());
		}
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = ScrollSpy._jQueryInterface;
	$.fn[NAME].Constructor = ScrollSpy;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return ScrollSpy._jQueryInterface;
	};

	return ScrollSpy;
}(jQuery);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.0.0-alpha.6): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

var Tab = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */

	var NAME = 'tab';
	var VERSION = '4.0.0-alpha.6';
	var DATA_KEY = 'bs.tab';
	var EVENT_KEY = "." + DATA_KEY;
	var DATA_API_KEY = '.data-api';
	var JQUERY_NO_CONFLICT = $.fn[NAME];
	var TRANSITION_DURATION = 150;

	var Event = {
		HIDE: "hide" + EVENT_KEY,
		HIDDEN: "hidden" + EVENT_KEY,
		SHOW: "show" + EVENT_KEY,
		SHOWN: "shown" + EVENT_KEY,
		CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
	};

	var ClassName = {
		DROPDOWN_MENU: 'dropdown-menu',
		ACTIVE: 'active',
		DISABLED: 'disabled',
		FADE: 'fade',
		SHOW: 'show'
	};

	var Selector = {
		A: 'a',
		LI: 'li',
		DROPDOWN: '.dropdown',
		LIST: 'ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)',
		FADE_CHILD: '> .nav-item .fade, > .fade',
		ACTIVE: '.active',
		ACTIVE_CHILD: '> .nav-item > .active, > .active',
		DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"]',
		DROPDOWN_TOGGLE: '.dropdown-toggle',
		DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Tab = function () {
		function Tab(element) {
			_classCallCheck(this, Tab);

			this._element = element;
		}

		// getters

		_createClass(Tab, [{
			key: "show",


			// public

			value: function show() {
				var _this24 = this;

				if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE) || $(this._element).hasClass(ClassName.DISABLED)) {
					return;
				}

				var target = void 0;
				var previous = void 0;
				var listElement = $(this._element).closest(Selector.LIST)[0];
				var selector = Util.getSelectorFromElement(this._element);

				if (listElement) {
					previous = $.makeArray($(listElement).find(Selector.ACTIVE));
					previous = previous[previous.length - 1];
				}

				var hideEvent = $.Event(Event.HIDE, {
					relatedTarget: this._element
				});

				var showEvent = $.Event(Event.SHOW, {
					relatedTarget: previous
				});

				if (previous) {
					$(previous).trigger(hideEvent);
				}

				$(this._element).trigger(showEvent);

				if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
					return;
				}

				if (selector) {
					target = $(selector)[0];
				}

				this._activate(this._element, listElement);

				var complete = function complete() {
					var hiddenEvent = $.Event(Event.HIDDEN, {
						relatedTarget: _this24._element
					});

					var shownEvent = $.Event(Event.SHOWN, {
						relatedTarget: previous
					});

					$(previous).trigger(hiddenEvent);
					$(_this24._element).trigger(shownEvent);
				};

				if (target) {
					this._activate(target, target.parentNode, complete);
				} else {
					complete();
				}
			}
		}, {
			key: "dispose",
			value: function dispose() {
				$.removeClass(this._element, DATA_KEY);
				this._element = null;
			}

			// private

		}, {
			key: "_activate",
			value: function _activate(element, container, callback) {
				var _this25 = this;

				var active = $(container).find(Selector.ACTIVE_CHILD)[0];
				var isTransitioning = callback && Util.supportsTransitionEnd() && (active && $(active).hasClass(ClassName.FADE) || Boolean($(container).find(Selector.FADE_CHILD)[0]));

				var complete = function complete() {
					return _this25._transitionComplete(element, active, isTransitioning, callback);
				};

				if (active && isTransitioning) {
					$(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
				} else {
					complete();
				}

				if (active) {
					$(active).removeClass(ClassName.SHOW);
				}
			}
		}, {
			key: "_transitionComplete",
			value: function _transitionComplete(element, active, isTransitioning, callback) {
				if (active) {
					$(active).removeClass(ClassName.ACTIVE);

					var dropdownChild = $(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

					if (dropdownChild) {
						$(dropdownChild).removeClass(ClassName.ACTIVE);
					}

					active.setAttribute('aria-expanded', false);
				}

				$(element).addClass(ClassName.ACTIVE);
				element.setAttribute('aria-expanded', true);

				if (isTransitioning) {
					Util.reflow(element);
					$(element).addClass(ClassName.SHOW);
				} else {
					$(element).removeClass(ClassName.FADE);
				}

				if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {

					var dropdownElement = $(element).closest(Selector.DROPDOWN)[0];
					if (dropdownElement) {
						$(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
					}

					element.setAttribute('aria-expanded', true);
				}

				if (callback) {
					callback();
				}
			}

			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $this = $(this);
					var data = $this.data(DATA_KEY);

					if (!data) {
						data = new Tab(this);
						$this.data(DATA_KEY, data);
					}

					if (typeof config === 'string') {
						if (data[config] === undefined) {
							throw new Error("No method named \"" + config + "\"");
						}
						data[config]();
					}
				});
			}
		}, {
			key: "VERSION",
			get: function get() {
				return VERSION;
			}
		}]);

		return Tab;
	}();

	/**
  * ------------------------------------------------------------------------
  * Data Api implementation
  * ------------------------------------------------------------------------
  */

	$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
		event.preventDefault();
		Tab._jQueryInterface.call($(this), 'show');
	});

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */

	$.fn[NAME] = Tab._jQueryInterface;
	$.fn[NAME].Constructor = Tab;
	$.fn[NAME].noConflict = function () {
		$.fn[NAME] = JQUERY_NO_CONFLICT;
		return Tab._jQueryInterface;
	};

	return Tab;
}(jQuery);

var Util$2 = function () {

	/**
  * ------------------------------------------------------------------------
  * Private TransitionEnd Helpers
  * ------------------------------------------------------------------------
  */

	var transitionEnd = false;
	var _transitionEndSelector = '';

	var TransitionEndEvent = {
		WebkitTransition: 'webkitTransitionEnd',
		MozTransition: 'transitionend',
		OTransition: 'oTransitionEnd otransitionend',
		transition: 'transitionend'
	};

	function transitionEndTest() {
		if (window.QUnit) {
			return false;
		}

		var el = document.createElement('bmd');

		for (var name in TransitionEndEvent) {
			if (el.style[name] !== undefined) {
				return TransitionEndEvent[name]; // { end: TransitionEndEvent[name] }
			}
		}

		return false;
	}

	function setTransitionEndSupport() {
		transitionEnd = transitionEndTest();

		// generate a concatenated transition end event selector
		for (var name in TransitionEndEvent) {
			_transitionEndSelector += " " + TransitionEndEvent[name];
		}
	}

	/**
  * --------------------------------------------------------------------------
  * Public Util Api
  * --------------------------------------------------------------------------
  */

	var Util = {
		transitionEndSupported: function transitionEndSupported() {
			return transitionEnd;
		},
		transitionEndSelector: function transitionEndSelector() {
			return _transitionEndSelector;
		},
		isChar: function isChar(event) {
			if (typeof event.which === 'undefined') {
				return true;
			} else if (typeof event.which === 'number' && event.which > 0) {
				return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 // backspace
				&& event.which !== 9 // tab
				&& event.which !== 13 // enter
				&& event.which !== 16 // shift
				&& event.which !== 17 // ctrl
				&& event.which !== 20 // caps lock
				&& event.which !== 27 // escape
				;
			}
			return false;
		},
		assert: function assert($element, invalidTest, message) {
			if (invalidTest) {
				if (!$element === undefined) {
					$element.css('border', '1px solid red');
				}
				console.error(message, $element); // eslint-disable-line no-console
				throw message;
			}
		},
		describe: function describe($element) {
			if ($element === undefined) {
				return 'undefined';
			} else if ($element.length === 0) {
				return '(no matching elements)';
			}
			return $element[0].outerHTML.split('>')[0] + ">";
		}
	};

	setTransitionEndSupport();
	return Util;
}(jQuery);

var Base = function ($) {

	var ClassName = {
		BMD_FORM_GROUP: 'bmd-form-group',
		IS_FILLED: 'is-filled',
		IS_FOCUSED: 'is-focused'
	};

	var Selector = {
		BMD_FORM_GROUP: "." + ClassName.BMD_FORM_GROUP
	};

	var Default = {};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Base = function () {

		/**
   *
   * @param element
   * @param config
   * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
   */
		function Base($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

			_classCallCheck(this, Base);

			this.$element = $element;
			this.config = $.extend(true, {}, Default, config);

			// set properties for use in the constructor initialization
			for (var key in properties) {
				this[key] = properties[key];
			}
		}

		_createClass(Base, [{
			key: "dispose",
			value: function dispose(dataKey) {
				this.$element.data(dataKey, null);
				this.$element = null;
				this.config = null;
			}

			// ------------------------------------------------------------------------
			// protected

		}, {
			key: "addFormGroupFocus",
			value: function addFormGroupFocus() {
				if (!this.$element.prop('disabled')) {
					this.$bmdFormGroup.addClass(ClassName.IS_FOCUSED);
				}
			}
		}, {
			key: "removeFormGroupFocus",
			value: function removeFormGroupFocus() {
				this.$bmdFormGroup.removeClass(ClassName.IS_FOCUSED);
			}
		}, {
			key: "removeIsFilled",
			value: function removeIsFilled() {
				this.$bmdFormGroup.removeClass(ClassName.IS_FILLED);
			}
		}, {
			key: "addIsFilled",
			value: function addIsFilled() {
				this.$bmdFormGroup.addClass(ClassName.IS_FILLED);
			}

			// Find bmd-form-group

		}, {
			key: "findMdbFormGroup",
			value: function findMdbFormGroup() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

				var mfg = this.$element.closest(Selector.BMD_FORM_GROUP);
				if (mfg.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.BMD_FORM_GROUP + " for " + Util$2.describe(this.$element));
				}
				return mfg;
			}

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}]);

		return Base;
	}();

	return Base;
}(jQuery);

var BaseInput = function ($) {

	var ClassName = {
		FORM_GROUP: 'form-group',
		BMD_FORM_GROUP: 'bmd-form-group',
		BMD_LABEL: 'bmd-label',
		BMD_LABEL_STATIC: 'bmd-label-static',
		BMD_LABEL_PLACEHOLDER: 'bmd-label-placeholder',
		BMD_LABEL_FLOATING: 'bmd-label-floating',
		HAS_DANGER: 'has-danger',
		IS_FILLED: 'is-filled',
		IS_FOCUSED: 'is-focused',
		INPUT_GROUP: 'input-group'
	};

	var Selector = {
		FORM_GROUP: "." + ClassName.FORM_GROUP,
		BMD_FORM_GROUP: "." + ClassName.BMD_FORM_GROUP,
		BMD_LABEL_WILDCARD: "label[class^='" + ClassName.BMD_LABEL + "'], label[class*=' " + ClassName.BMD_LABEL + "']" // match any label variant if specified
	};

	var Default = {
		validate: false,
		formGroup: {
			required: false
		},
		bmdFormGroup: {
			template: "<span class='" + ClassName.BMD_FORM_GROUP + "'></span>",
			create: true, // create a wrapper if form-group not found
			required: true // not recommended to turn this off, only used for inline components
		},
		label: {
			required: false,

			// Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
			//  - a function(thisComponent); or
			//  - a string selector used like $bmdFormGroup.find(selector)
			//
			// Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
			//
			selectors: [".form-control-label", // in the case of horizontal or inline forms, this will be marked
			"> label" // usual case for text inputs, first child.  Deeper would find toggle labels so don't do that.
			],
			className: ClassName.BMD_LABEL_STATIC
		},
		requiredClasses: [],
		invalidComponentMatches: [],
		convertInputSizeVariations: true
	};

	var FormControlSizeMarkers = {
		'form-control-lg': 'bmd-form-group-lg',
		'form-control-sm': 'bmd-form-group-sm'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var BaseInput = function (_Base) {
		_inherits(BaseInput, _Base);

		/**
   *
   * @param element
   * @param config
   * @param properties - anything that needs to be set as this[key] = value.  Works around the need to call `super` before using `this`
   */
		function BaseInput($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

			_classCallCheck(this, BaseInput);

			// Enforce no overlap between components to prevent side effects
			var _this26 = _possibleConstructorReturn(this, (BaseInput.__proto__ || Object.getPrototypeOf(BaseInput)).call(this, $element, $.extend(true, {}, Default, config), properties));

			_this26._rejectInvalidComponentMatches();

			// Enforce expected structure (if any)
			_this26.rejectWithoutRequiredStructure();

			// Enforce required classes for a consistent rendering
			_this26._rejectWithoutRequiredClasses();

			// Resolve the form-group first, it will be used for bmd-form-group if possible
			//   note: different components have different rules
			_this26.$formGroup = _this26.findFormGroup(_this26.config.formGroup.required);

			// Will add bmd-form-group to form-group or create an bmd-form-group
			//  Performance Note: for those forms that are really performance driven, create the markup with the .bmd-form-group to avoid
			//    rendering changes once added.
			_this26.$bmdFormGroup = _this26.resolveMdbFormGroup();

			// Resolve and mark the bmdLabel if necessary as defined by the config
			_this26.$bmdLabel = _this26.resolveMdbLabel();

			// Signal to the bmd-form-group that a form-control-* variation is being used
			_this26.resolveMdbFormGroupSizing();

			_this26.addFocusListener();
			_this26.addChangeListener();

			if (_this26.$element.val() != '') {
				_this26.addIsFilled();
			}
			return _this26;
		}

		_createClass(BaseInput, [{
			key: "dispose",
			value: function dispose(dataKey) {
				_get(BaseInput.prototype.__proto__ || Object.getPrototypeOf(BaseInput.prototype), "dispose", this).call(this, dataKey);
				this.$bmdFormGroup = null;
				this.$formGroup = null;
			}

			// ------------------------------------------------------------------------
			// protected

		}, {
			key: "rejectWithoutRequiredStructure",
			value: function rejectWithoutRequiredStructure() {
				// implement
			}
		}, {
			key: "addFocusListener",
			value: function addFocusListener() {
				var _this27 = this;

				this.$element.on('focus', function () {
					_this27.addFormGroupFocus();
				}).on('blur', function () {
					_this27.removeFormGroupFocus();
				});
			}
		}, {
			key: "addChangeListener",
			value: function addChangeListener() {
				var _this28 = this;

				this.$element.on('keydown paste', function (event) {
					if (Util$2.isChar(event)) {
						_this28.addIsFilled();
					}
				}).on('keyup change', function () {

					// make sure empty is added back when there is a programmatic value change.
					//  NOTE: programmatic changing of value using $.val() must trigger the change event i.e. $.val('x').trigger('change')
					if (_this28.isEmpty()) {
						_this28.removeIsFilled();
					} else {
						_this28.addIsFilled();
					}

					if (_this28.config.validate) {
						// Validation events do not bubble, so they must be attached directly to the text: http://jsfiddle.net/PEpRM/1/
						//  Further, even the bind method is being caught, but since we are already calling #checkValidity here, just alter
						//  the form-group on change.
						//
						// NOTE: I'm not sure we should be intervening regarding validation, this seems better as a README and snippet of code.
						//        BUT, I've left it here for backwards compatibility.
						var isValid = typeof _this28.$element[0].checkValidity === 'undefined' || _this28.$element[0].checkValidity();
						if (isValid) {
							_this28.removeHasDanger();
						} else {
							_this28.addHasDanger();
						}
					}
				});
			}
		}, {
			key: "addHasDanger",
			value: function addHasDanger() {
				this.$bmdFormGroup.addClass(ClassName.HAS_DANGER);
			}
		}, {
			key: "removeHasDanger",
			value: function removeHasDanger() {
				this.$bmdFormGroup.removeClass(ClassName.HAS_DANGER);
			}
		}, {
			key: "isEmpty",
			value: function isEmpty() {
				return this.$element.val() === null || this.$element.val() === undefined || this.$element.val() === '';
			}

			// Will add bmd-form-group to form-group or create a bmd-form-group if necessary

		}, {
			key: "resolveMdbFormGroup",
			value: function resolveMdbFormGroup() {
				var mfg = this.findMdbFormGroup(false);
				if (mfg === undefined || mfg.length === 0) {
					if (this.config.bmdFormGroup.create && (this.$formGroup === undefined || this.$formGroup.length === 0)) {
						// If a form-group doesn't exist (not recommended), take a guess and wrap the element (assuming no label).
						//  note: it's possible to make this smarter, but I need to see valid cases before adding any complexity.

						// this may be an input-group, wrap that instead
						if (this.outerElement().parent().hasClass(ClassName.INPUT_GROUP)) {
							this.outerElement().parent().wrap(this.config.bmdFormGroup.template);
						} else {
							this.outerElement().wrap(this.config.bmdFormGroup.template);
						}
					} else {
						// a form-group does exist, add our marker class to it
						this.$formGroup.addClass(ClassName.BMD_FORM_GROUP);

						// OLD: may want to implement this after all, see how the styling turns out, but using an existing form-group is less manipulation of the dom and therefore preferable
						// A form-group does exist, so add an bmd-form-group wrapping it's internal contents
						//fg.wrapInner(this.config.bmdFormGroup.template)
					}

					mfg = this.findMdbFormGroup(this.config.bmdFormGroup.required);
				}

				return mfg;
			}

			// Demarcation element (e.g. first child of a form-group)
			//  Subclasses such as file inputs may have different structures

		}, {
			key: "outerElement",
			value: function outerElement() {
				return this.$element;
			}

			// Will add bmd-label to bmd-form-group if not already specified

		}, {
			key: "resolveMdbLabel",
			value: function resolveMdbLabel() {

				var label = this.$bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD);
				if (label === undefined || label.length === 0) {
					// we need to find it based on the configured selectors
					label = this.findMdbLabel(this.config.label.required);

					if (label === undefined || label.length === 0) {
						// no label found, and finder did not require one
					} else {
						// a candidate label was found, add the configured default class name
						label.addClass(this.config.label.className);
					}
				}

				return label;
			}

			// Find bmd-label variant based on the config selectors

		}, {
			key: "findMdbLabel",
			value: function findMdbLabel() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

				var label = null;

				// use the specified selector order
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = this.config.label.selectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var selector = _step.value;

						if ($.isFunction(selector)) {
							label = selector(this);
						} else {
							label = this.$bmdFormGroup.find(selector);
						}

						if (label !== undefined && label.length > 0) {
							break;
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				if (label.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.BMD_LABEL_WILDCARD + " within form-group for " + Util$2.describe(this.$element));
				}
				return label;
			}

			// Find bmd-form-group

		}, {
			key: "findFormGroup",
			value: function findFormGroup() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

				var fg = this.$element.closest(Selector.FORM_GROUP);
				if (fg.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.FORM_GROUP + " for " + Util$2.describe(this.$element));
				}
				return fg;
			}

			// Due to the interconnected nature of labels/inputs/help-blocks, signal the bmd-form-group-* size variation based on
			//  a found form-control-* size

		}, {
			key: "resolveMdbFormGroupSizing",
			value: function resolveMdbFormGroupSizing() {
				if (!this.config.convertInputSizeVariations) {
					return;
				}

				// Modification - Change text-sm/lg to form-group-sm/lg instead (preferred standard and simpler css/less variants)
				for (var inputSize in FormControlSizeMarkers) {
					if (this.$element.hasClass(inputSize)) {
						//this.$element.removeClass(inputSize)
						this.$bmdFormGroup.addClass(FormControlSizeMarkers[inputSize]);
					}
				}
			}

			// ------------------------------------------------------------------------
			// private

		}, {
			key: "_rejectInvalidComponentMatches",
			value: function _rejectInvalidComponentMatches() {
				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					for (var _iterator2 = this.config.invalidComponentMatches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var otherComponent = _step2.value;

						otherComponent.rejectMatch(this.constructor.name, this.$element);
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2.return) {
							_iterator2.return();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}
			}
		}, {
			key: "_rejectWithoutRequiredClasses",
			value: function _rejectWithoutRequiredClasses() {
				var _iteratorNormalCompletion3 = true;
				var _didIteratorError3 = false;
				var _iteratorError3 = undefined;

				try {
					for (var _iterator3 = this.config.requiredClasses[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
						var requiredClass = _step3.value;


						var found = false;
						// allow one of several classes to be passed in x||y
						if (requiredClass.indexOf('||') !== -1) {
							var oneOf = requiredClass.split('||');
							var _iteratorNormalCompletion4 = true;
							var _didIteratorError4 = false;
							var _iteratorError4 = undefined;

							try {
								for (var _iterator4 = oneOf[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
									var _requiredClass = _step4.value;

									if (this.$element.hasClass(_requiredClass)) {
										found = true;
										break;
									}
								}
							} catch (err) {
								_didIteratorError4 = true;
								_iteratorError4 = err;
							} finally {
								try {
									if (!_iteratorNormalCompletion4 && _iterator4.return) {
										_iterator4.return();
									}
								} finally {
									if (_didIteratorError4) {
										throw _iteratorError4;
									}
								}
							}
						} else if (this.$element.hasClass(requiredClass)) {
							found = true;
						}

						// error if not found
						if (!found) {
							$.error(this.constructor.name + " element: " + Util$2.describe(this.$element) + " requires class: " + requiredClass);
						}
					}
				} catch (err) {
					_didIteratorError3 = true;
					_iteratorError3 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion3 && _iterator3.return) {
							_iterator3.return();
						}
					} finally {
						if (_didIteratorError3) {
							throw _iteratorError3;
						}
					}
				}
			}

			// ------------------------------------------------------------------------
			// static

		}]);

		return BaseInput;
	}(Base);

	return BaseInput;
}(jQuery);

var BaseSelection = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var Default = {
		label: {
			required: false

			// Prioritized find order for resolving the label to be used as an bmd-label if not specified in the markup
			//  - a function(thisComponent); or
			//  - a string selector used like $bmdFormGroup.find(selector)
			//
			// Note this only runs if $bmdFormGroup.find(Selector.BMD_LABEL_WILDCARD) fails to find a label (as authored in the markup)
			//
			//selectors: [
			//  `.form-control-label`, // in the case of horizontal or inline forms, this will be marked
			//  `> label` // usual case for text inputs
			//]
		}
	};

	var Selector = {
		LABEL: 'label'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var BaseSelection = function (_BaseInput) {
		_inherits(BaseSelection, _BaseInput);

		function BaseSelection($element, config, properties) {
			_classCallCheck(this, BaseSelection);

			var _this29 = _possibleConstructorReturn(this, (BaseSelection.__proto__ || Object.getPrototypeOf(BaseSelection)).call(this, $element, $.extend(true, {}, Default, config), properties));
			// properties = {inputType: checkbox, outerClass: checkbox-inline}
			// '.checkbox|switch|radio > label > input[type=checkbox|radio]'
			// '.${this.outerClass} > label > input[type=${this.inputType}]'

			_this29.decorateMarkup();
			return _this29;
		}

		// ------------------------------------------------------------------------
		// protected

		_createClass(BaseSelection, [{
			key: "decorateMarkup",
			value: function decorateMarkup() {
				var $decorator = $(this.config.template);
				this.$element.after($decorator);

				// initialize ripples after decorator has been inserted into DOM
				if (this.config.ripples !== false) {
					$decorator.bmdRipples();
				}
			}

			// Demarcation element (e.g. first child of a form-group)

		}, {
			key: "outerElement",
			value: function outerElement() {
				// .checkbox|switch|radio > label > input[type=checkbox|radio]
				// label.checkbox-inline > input[type=checkbox|radio]
				// .${this.outerClass} > label > input[type=${this.inputType}]
				return this.$element.parent().closest("." + this.outerClass);
			}
		}, {
			key: "rejectWithoutRequiredStructure",
			value: function rejectWithoutRequiredStructure() {
				// '.checkbox|switch|radio > label > input[type=checkbox|radio]'
				// '.${this.outerClass} > label > input[type=${this.inputType}]'
				Util$2.assert(this.$element, !this.$element.parent().prop('tagName') === 'label', this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element should be <label>.");
				Util$2.assert(this.$element, !this.outerElement().hasClass(this.outerClass), this.constructor.name + "'s " + Util$2.describe(this.$element) + " outer element should have class " + this.outerClass + ".");
			}
		}, {
			key: "addFocusListener",
			value: function addFocusListener() {
				var _this30 = this;

				// checkboxes didn't appear to bubble to the document, so we'll bind these directly
				this.$element.closest(Selector.LABEL).hover(function () {
					_this30.addFormGroupFocus();
				}, function () {
					_this30.removeFormGroupFocus();
				});
			}
		}, {
			key: "addChangeListener",
			value: function addChangeListener() {
				var _this31 = this;

				this.$element.change(function () {
					_this31.$element.blur();
				});
			}

			// ------------------------------------------------------------------------
			// private

		}]);

		return BaseSelection;
	}(BaseInput);

	return BaseSelection;
}(jQuery);

//import Text from './text'
//import File from './file'
//import Radio from './radio'
//import Textarea from './textarea'
//import Select from './select'
var Checkbox = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'checkbox';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		template: "<span class='checkbox-decorator'><span class='check'></span></span>"
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Checkbox = function (_BaseSelection) {
		_inherits(Checkbox, _BaseSelection);

		function Checkbox($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { inputType: NAME, outerClass: NAME };

			_classCallCheck(this, Checkbox);

			return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [File, Radio, Text, Textarea, Select]},
			Default, config), properties));
		}

		_createClass(Checkbox, [{
			key: "dispose",
			value: function dispose() {
				var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

				_get(Checkbox.prototype.__proto__ || Object.getPrototypeOf(Checkbox.prototype), "dispose", this).call(this, dataKey);
			}
		}], [{
			key: "matches",
			value: function matches($element) {
				// '.checkbox > label > input[type=checkbox]'
				if ($element.attr('type') === 'checkbox') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='checkbox'.");
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Checkbox($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Checkbox;
	}(BaseSelection);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Checkbox._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Checkbox;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Checkbox._jQueryInterface;
	};

	return Checkbox;
}(jQuery);

var CheckboxInline = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'checkboxInline';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		bmdFormGroup: {
			create: false, // no bmd-form-group creation if form-group not present. It messes with the layout.
			required: false
		}
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var CheckboxInline = function (_Checkbox) {
		_inherits(CheckboxInline, _Checkbox);

		function CheckboxInline($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { inputType: 'checkbox', outerClass: 'checkbox-inline' };

			_classCallCheck(this, CheckboxInline);

			return _possibleConstructorReturn(this, (CheckboxInline.__proto__ || Object.getPrototypeOf(CheckboxInline)).call(this, $element, $.extend(true, {}, Default, config), properties));
		}

		_createClass(CheckboxInline, [{
			key: "dispose",
			value: function dispose() {
				_get(CheckboxInline.prototype.__proto__ || Object.getPrototypeOf(CheckboxInline.prototype), "dispose", this).call(this, DATA_KEY);
			}

			//static matches($element) {
			//  // '.checkbox-inline > input[type=checkbox]'
			//  if ($element.attr('type') === 'checkbox') {
			//    return true
			//  }
			//  return false
			//}
			//
			//static rejectMatch(component, $element) {
			//  Util.assert(this.$element, this.matches($element), `${component} component element ${Util.describe($element)} is invalid for type='checkbox'.`)
			//}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new CheckboxInline($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return CheckboxInline;
	}(Checkbox);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = CheckboxInline._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = CheckboxInline;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return CheckboxInline._jQueryInterface;
	};

	return CheckboxInline;
}(jQuery);

var CollapseInline = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'collapseInline';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Selector = {
		ANY_INPUT: 'input, select, textarea'
	};

	var ClassName = {
		IN: 'in',
		COLLAPSE: 'collapse',
		COLLAPSING: 'collapsing',
		COLLAPSED: 'collapsed',
		WIDTH: 'width'
	};
	var Default = {};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var CollapseInline = function (_Base2) {
		_inherits(CollapseInline, _Base2);

		// $element is expected to be the trigger
		//  i.e. <button class="btn bmd-btn-icon" for="search" data-toggle="collapse" data-target="#search-field" aria-expanded="false" aria-controls="search-field">
		function CollapseInline($element, config) {
			_classCallCheck(this, CollapseInline);

			var _this34 = _possibleConstructorReturn(this, (CollapseInline.__proto__ || Object.getPrototypeOf(CollapseInline)).call(this, $element, $.extend(true, {}, Default, config)));

			_this34.$bmdFormGroup = _this34.findMdbFormGroup(true);

			var collapseSelector = $element.data('target');
			_this34.$collapse = $(collapseSelector);

			Util$2.assert($element, _this34.$collapse.length === 0, "Cannot find collapse target for " + Util$2.describe($element));
			Util$2.assert(_this34.$collapse, !_this34.$collapse.hasClass(ClassName.COLLAPSE), Util$2.describe(_this34.$collapse) + " is expected to have the '" + ClassName.COLLAPSE + "' class.  It is being targeted by " + Util$2.describe($element));

			// find the first input for focusing
			var $inputs = _this34.$bmdFormGroup.find(Selector.ANY_INPUT);
			if ($inputs.length > 0) {
				_this34.$input = $inputs.first();
			}

			// automatically add the marker class to collapse width instead of height - nice convenience because it is easily forgotten
			if (!_this34.$collapse.hasClass(ClassName.WIDTH)) {
				_this34.$collapse.addClass(ClassName.WIDTH);
			}

			if (_this34.$input) {
				// add a listener to set focus
				_this34.$collapse.on('shown.bs.collapse', function () {
					_this34.$input.focus();
				});

				// add a listener to collapse field
				_this34.$input.blur(function () {
					_this34.$collapse.collapse('hide');
				});
			}
			return _this34;
		}

		_createClass(CollapseInline, [{
			key: "dispose",
			value: function dispose() {
				_get(CollapseInline.prototype.__proto__ || Object.getPrototypeOf(CollapseInline.prototype), "dispose", this).call(this, DATA_KEY);
				this.$bmdFormGroup = null;
				this.$collapse = null;
				this.$input = null;
			}

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new CollapseInline($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return CollapseInline;
	}(Base);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = CollapseInline._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = CollapseInline;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return CollapseInline._jQueryInterface;
	};

	return CollapseInline;
}(jQuery);

//import Checkbox from './checkbox'
//import Radio from './radio'
//import Switch from './switch'
//import Text from './text'
//import Textarea from './textarea'
//import Select from './select'
var File = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'file';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {};

	var ClassName = {
		FILE: NAME,
		IS_FILE: 'is-file'
	};

	var Selector = {
		FILENAMES: 'input.form-control[readonly]'
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var File = function (_BaseInput2) {
		_inherits(File, _BaseInput2);

		function File($element, config) {
			_classCallCheck(this, File);

			var _this35 = _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [Checkbox, Radio, Text, Textarea, Select, Switch]},
			Default, config)));

			_this35.$bmdFormGroup.addClass(ClassName.IS_FILE);
			return _this35;
		}

		_createClass(File, [{
			key: "dispose",
			value: function dispose() {
				_get(File.prototype.__proto__ || Object.getPrototypeOf(File.prototype), "dispose", this).call(this, DATA_KEY);
			}
		}, {
			key: "outerElement",


			// ------------------------------------------------------------------------
			// protected

			// Demarcation element (e.g. first child of a form-group)
			value: function outerElement() {
				// label.file > input[type=file]
				return this.$element.parent().closest("." + ClassName.FILE);
			}
		}, {
			key: "rejectWithoutRequiredStructure",
			value: function rejectWithoutRequiredStructure() {
				// label.file > input[type=file]
				Util$2.assert(this.$element, !this.outerElement().prop('tagName') === 'label', this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element " + Util$2.describe(this.outerElement()) + " should be <label>.");
				Util$2.assert(this.$element, !this.outerElement().hasClass(ClassName.FILE), this.constructor.name + "'s " + Util$2.describe(this.$element) + " parent element " + Util$2.describe(this.outerElement()) + " should have class ." + ClassName.FILE + ".");
			}
		}, {
			key: "addFocusListener",
			value: function addFocusListener() {
				var _this36 = this;

				this.$bmdFormGroup.on('focus', function () {
					_this36.addFormGroupFocus();
				}).on('blur', function () {
					_this36.removeFormGroupFocus();
				});
			}
		}, {
			key: "addChangeListener",
			value: function addChangeListener() {
				var _this37 = this;

				// set the fileinput readonly field with the name of the file
				this.$element.on('change', function () {
					var value = '';
					$.each(_this37.$element.files, function (i, file) {
						value += file.name + "  , ";
					});
					value = value.substring(0, value.length - 2);
					if (value) {
						_this37.addIsFilled();
					} else {
						_this37.removeIsFilled();
					}
					_this37.$bmdFormGroup.find(Selector.FILENAMES).val(value);
				});
			}

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "matches",
			value: function matches($element) {
				if ($element.attr('type') === 'file') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='file'.");
			}
		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new File($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return File;
	}(BaseInput);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = File._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = File;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return File._jQueryInterface;
	};

	return File;
}(jQuery);

//import Text from './text'
//import File from './file'
//import Checkbox from './checkbox'
//import Switch from './switch'
var Radio = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'radio';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		template: "<span class='bmd-radio'></span>"
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Radio = function (_BaseSelection2) {
		_inherits(Radio, _BaseSelection2);

		function Radio($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { inputType: NAME, outerClass: NAME };

			_classCallCheck(this, Radio);

			return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [Checkbox, File, Switch, Text]},
			Default, config), properties));
		}

		_createClass(Radio, [{
			key: "dispose",
			value: function dispose() {
				var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

				_get(Radio.prototype.__proto__ || Object.getPrototypeOf(Radio.prototype), "dispose", this).call(this, dataKey);
			}
		}], [{
			key: "matches",
			value: function matches($element) {
				// '.radio > label > input[type=radio]'
				if ($element.attr('type') === 'radio') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='radio'.");
			}

			// ------------------------------------------------------------------------
			// protected

			//decorateMarkup() {
			//  this.$element.after(this.config.template)
			//}


			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Radio($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Radio;
	}(BaseSelection);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Radio._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Radio;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Radio._jQueryInterface;
	};

	return Radio;
}(jQuery);

var RadioInline = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'radioInline';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		bmdFormGroup: {
			create: false, // no bmd-form-group creation if form-group not present. It messes with the layout.
			required: false
		}
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var RadioInline = function (_Radio) {
		_inherits(RadioInline, _Radio);

		function RadioInline($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { inputType: 'radio', outerClass: 'radio-inline' };

			_classCallCheck(this, RadioInline);

			return _possibleConstructorReturn(this, (RadioInline.__proto__ || Object.getPrototypeOf(RadioInline)).call(this, $element, $.extend(true, {}, Default, config), properties));
		}

		_createClass(RadioInline, [{
			key: "dispose",
			value: function dispose() {
				_get(RadioInline.prototype.__proto__ || Object.getPrototypeOf(RadioInline.prototype), "dispose", this).call(this, DATA_KEY);
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new RadioInline($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return RadioInline;
	}(Radio);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = RadioInline._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = RadioInline;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return RadioInline._jQueryInterface;
	};

	return RadioInline;
}(jQuery);

var BaseFormControl = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var Default = {
		requiredClasses: ['form-control']
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var BaseFormControl = function (_BaseInput3) {
		_inherits(BaseFormControl, _BaseInput3);

		function BaseFormControl($element, config) {
			_classCallCheck(this, BaseFormControl);

			// Initially mark as empty
			var _this40 = _possibleConstructorReturn(this, (BaseFormControl.__proto__ || Object.getPrototypeOf(BaseFormControl)).call(this, $element, $.extend(true, Default, config)));

			if (_this40.isEmpty()) {
				_this40.removeIsFilled();
			}
			return _this40;
		}

		return BaseFormControl;
	}(BaseInput);

	return BaseFormControl;
}(jQuery);

//import Checkbox from './checkbox'
//import File from './file'
//import Radio from './radio'
//import Switch from './switch'
//import Text from './text'
//import Textarea from './textarea'
var Select = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'select';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		requiredClasses: ['form-control||custom-select']
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Select = function (_BaseFormControl) {
		_inherits(Select, _BaseFormControl);

		function Select($element, config) {
			_classCallCheck(this, Select);

			// floating labels will cover the options, so trigger them to be above (if used)
			var _this41 = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [Checkbox, File, Radio, Switch, Text, Textarea]},
			Default, config)));

			_this41.addIsFilled();
			return _this41;
		}

		_createClass(Select, [{
			key: "dispose",
			value: function dispose() {
				_get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), "dispose", this).call(this, DATA_KEY);
			}
		}], [{
			key: "matches",
			value: function matches($element) {
				if ($element.prop('tagName') === 'select') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for <select>.");
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Select($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Select;
	}(BaseFormControl);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Select._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Select;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Select._jQueryInterface;
	};

	return Select;
}(jQuery);

var Switch = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'switch';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {
		template: "<span class='bmd-switch-track'></span>"
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Switch = function (_Checkbox2) {
		_inherits(Switch, _Checkbox2);

		function Switch($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { inputType: 'checkbox', outerClass: 'switch' };

			_classCallCheck(this, Switch);

			return _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, $element, $.extend(true, {}, Default, config), properties));
			// selector: '.switch > label > input[type=checkbox]'
		}

		_createClass(Switch, [{
			key: "dispose",
			value: function dispose() {
				_get(Switch.prototype.__proto__ || Object.getPrototypeOf(Switch.prototype), "dispose", this).call(this, DATA_KEY);
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Switch($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Switch;
	}(Checkbox);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Switch._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Switch;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Switch._jQueryInterface;
	};

	return Switch;
}(jQuery);

//import Checkbox from './checkbox'
//import File from './file'
//import Radio from './radio'
//import Switch from './switch'
//import Textarea from './textarea'
//import Select from './select'
var Text = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'text';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Text = function (_BaseFormControl2) {
		_inherits(Text, _BaseFormControl2);

		function Text($element, config) {
			_classCallCheck(this, Text);

			return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [Checkbox, File, Radio, Switch, Select, Textarea]},
			Default, config)));
		}

		_createClass(Text, [{
			key: "dispose",
			value: function dispose() {
				var dataKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATA_KEY;

				_get(Text.prototype.__proto__ || Object.getPrototypeOf(Text.prototype), "dispose", this).call(this, dataKey);
			}
		}], [{
			key: "matches",
			value: function matches($element) {
				if ($element.attr('type') === 'text') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for type='text'.");
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Text($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Text;
	}(BaseFormControl);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Text._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Text;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Text._jQueryInterface;
	};

	return Text;
}(jQuery);

//import Checkbox from './checkbox'
//import File from './file'
//import Radio from './radio'
//import Switch from './switch'
//import Text from './text'
//import Select from './select'
var Textarea = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'textarea';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Textarea = function (_BaseFormControl3) {
		_inherits(Textarea, _BaseFormControl3);

		function Textarea($element, config) {
			_classCallCheck(this, Textarea);

			return _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call(this, $element, $.extend(true,
			//{invalidComponentMatches: [Checkbox, File, Radio, Text, Select, Switch]},
			Default, config)));
		}

		_createClass(Textarea, [{
			key: "dispose",
			value: function dispose() {
				_get(Textarea.prototype.__proto__ || Object.getPrototypeOf(Textarea.prototype), "dispose", this).call(this, DATA_KEY);
			}
		}], [{
			key: "matches",
			value: function matches($element) {
				if ($element.prop('tagName') === 'textarea') {
					return true;
				}
				return false;
			}
		}, {
			key: "rejectMatch",
			value: function rejectMatch(component, $element) {
				Util$2.assert(this.$element, this.matches($element), component + " component element " + Util$2.describe($element) + " is invalid for <textarea>.");
			}

			// ------------------------------------------------------------------------
			// protected

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}, {
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Textarea($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Textarea;
	}(BaseFormControl);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Textarea._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Textarea;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Textarea._jQueryInterface;
	};

	return Textarea;
}(jQuery);

var BaseLayout = function ($) {

	var ClassName = {
		CANVAS: 'bmd-layout-canvas',
		CONTAINER: 'bmd-layout-container',
		BACKDROP: "bmd-layout-backdrop"
	};

	var Selector = {
		CANVAS: "." + ClassName.CANVAS,
		CONTAINER: "." + ClassName.CONTAINER,
		BACKDROP: "." + ClassName.BACKDROP
	};

	var Default = {
		canvas: {
			create: true,
			required: true,
			template: "<div class=\"" + ClassName.CANVAS + "\"></div>"
		},
		backdrop: {
			create: true,
			required: true,
			template: "<div class=\"" + ClassName.BACKDROP + "\"></div>"
		}
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var BaseLayout = function (_Base3) {
		_inherits(BaseLayout, _Base3);

		function BaseLayout($element, config) {
			var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

			_classCallCheck(this, BaseLayout);

			var _this45 = _possibleConstructorReturn(this, (BaseLayout.__proto__ || Object.getPrototypeOf(BaseLayout)).call(this, $element, $.extend(true, {}, Default, config), properties));

			_this45.$container = _this45.findContainer(true);
			_this45.$backdrop = _this45.resolveBackdrop();
			_this45.resolveCanvas();
			return _this45;
		}

		_createClass(BaseLayout, [{
			key: "dispose",
			value: function dispose(dataKey) {
				_get(BaseLayout.prototype.__proto__ || Object.getPrototypeOf(BaseLayout.prototype), "dispose", this).call(this, dataKey);
				this.$container = null;
				this.$backdrop = null;
			}

			// ------------------------------------------------------------------------
			// protected

			// Will wrap container in bmd-layout-canvas if necessary

		}, {
			key: "resolveCanvas",
			value: function resolveCanvas() {
				var bd = this.findCanvas(false);
				if (bd === undefined || bd.length === 0) {
					if (this.config.canvas.create) {
						this.$container.wrap(this.config.canvas.template);
					}

					bd = this.findCanvas(this.config.canvas.required);
				}

				return bd;
			}

			// Find closest bmd-layout-container based on the given context

		}, {
			key: "findCanvas",
			value: function findCanvas() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
				var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;

				var canvas = context.closest(Selector.CANVAS);
				if (canvas.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.CANVAS + " for " + Util$2.describe(context));
				}
				return canvas;
			}

			// Will add bmd-layout-backdrop to bmd-layout-container if necessary

		}, {
			key: "resolveBackdrop",
			value: function resolveBackdrop() {
				var bd = this.findBackdrop(false);
				if (bd === undefined || bd.length === 0) {
					if (this.config.backdrop.create) {
						this.$container.append(this.config.backdrop.template);
					}

					bd = this.findBackdrop(this.config.backdrop.required);
				}

				return bd;
			}

			// Find closest bmd-layout-container based on the given context

		}, {
			key: "findBackdrop",
			value: function findBackdrop() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
				var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$container;

				var backdrop = context.find("> " + Selector.BACKDROP);
				if (backdrop.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.BACKDROP + " for " + Util$2.describe(context));
				}
				return backdrop;
			}

			// Find closest bmd-layout-container based on the given context

		}, {
			key: "findContainer",
			value: function findContainer() {
				var raiseError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
				var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$element;

				var container = context.closest(Selector.CONTAINER);
				if (container.length === 0 && raiseError) {
					$.error("Failed to find " + Selector.CONTAINER + " for " + Util$2.describe(context));
				}
				return container;
			}

			// ------------------------------------------------------------------------
			// private

			// ------------------------------------------------------------------------
			// static

		}]);

		return BaseLayout;
	}(Base);

	return BaseLayout;
}(jQuery);

var Drawer = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'drawer';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Keycodes = {
		ESCAPE: 27
		//ENTER: 13,
		//SPACE: 32
	};

	var ClassName = {
		IN: 'in',
		DRAWER_IN: "bmd-drawer-in",
		DRAWER_OUT: "bmd-drawer-out",
		DRAWER: 'bmd-layout-drawer',
		CONTAINER: 'bmd-layout-container'
	};

	var Default = {
		focusSelector: "a, button, input"
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Drawer = function (_BaseLayout) {
		_inherits(Drawer, _BaseLayout);

		// $element is expected to be the trigger
		//  i.e. <button class="btn bmd-btn-icon" for="search" data-toggle="drawer" data-target="#my-side-nav-drawer" aria-expanded="false" aria-controls="my-side-nav-drawer">
		function Drawer($element, config) {
			_classCallCheck(this, Drawer);

			var _this46 = _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, $element, $.extend(true, {}, Default, config)));

			_this46.$toggles = $("[data-toggle=\"drawer\"][href=\"#" + _this46.$element[0].id + "\"], [data-toggle=\"drawer\"][data-target=\"#" + _this46.$element[0].id + "\"]");

			_this46._addAria();

			// click or escape on the backdrop closes the drawer
			_this46.$backdrop.keydown(function (ev) {
				if (ev.which === Keycodes.ESCAPE) {
					_this46.hide();
				}
			}).click(function () {
				_this46.hide();
			});

			// escape on the drawer closes it
			_this46.$element.keydown(function (ev) {
				if (ev.which === Keycodes.ESCAPE) {
					_this46.hide();
				}
			});

			// any toggle button clicks
			_this46.$toggles.click(function () {
				_this46.toggle();
			});
			return _this46;
		}

		_createClass(Drawer, [{
			key: "dispose",
			value: function dispose() {
				_get(Drawer.prototype.__proto__ || Object.getPrototypeOf(Drawer.prototype), "dispose", this).call(this, DATA_KEY);
				this.$toggles = null;
			}
		}, {
			key: "toggle",
			value: function toggle() {
				if (this._isOpen()) {
					this.hide();
				} else {
					this.show();
				}
			}
		}, {
			key: "show",
			value: function show() {
				if (this._isForcedClosed() || this._isOpen()) {
					return;
				}

				this.$toggles.attr('aria-expanded', true);
				this.$element.attr('aria-expanded', true);
				this.$element.attr('aria-hidden', false);

				// focus on the first focusable item
				var $focusOn = this.$element.find(this.config.focusSelector);
				if ($focusOn.length > 0) {
					$focusOn.first().focus();
				}

				this.$container.addClass(ClassName.DRAWER_IN);
				// backdrop is responsively styled based on bmd-drawer-overlay, therefore style is none of our concern, simply add the marker class and let the scss determine if it should be displayed or not.
				this.$backdrop.addClass(ClassName.IN);
			}
		}, {
			key: "hide",
			value: function hide() {
				if (!this._isOpen()) {
					return;
				}

				this.$toggles.attr('aria-expanded', false);
				this.$element.attr('aria-expanded', false);
				this.$element.attr('aria-hidden', true);

				this.$container.removeClass(ClassName.DRAWER_IN);
				this.$backdrop.removeClass(ClassName.IN);
			}

			// ------------------------------------------------------------------------
			// private

		}, {
			key: "_isOpen",
			value: function _isOpen() {
				return this.$container.hasClass(ClassName.DRAWER_IN);
			}
		}, {
			key: "_isForcedClosed",
			value: function _isForcedClosed() {
				return this.$container.hasClass(ClassName.DRAWER_OUT);
			}
		}, {
			key: "_addAria",
			value: function _addAria() {
				var isOpen = this._isOpen();
				this.$element.attr('aria-expanded', isOpen);
				this.$element.attr('aria-hidden', isOpen);

				if (this.$toggles.length) {
					this.$toggles.attr('aria-expanded', isOpen);
				}
			}

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Drawer($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Drawer;
	}(BaseLayout);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Drawer._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Drawer;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Drawer._jQueryInterface;
	};

	return Drawer;
}(jQuery);

var Ripples = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'ripples';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var ClassName = {
		CONTAINER: 'ripple-container',
		DECORATOR: 'ripple-decorator'
	};

	var Selector = {
		CONTAINER: "." + ClassName.CONTAINER,
		DECORATOR: "." + ClassName.DECORATOR //,
	};

	var Default = {
		container: {
			template: "<div class='" + ClassName.CONTAINER + "'></div>"
		},
		decorator: {
			template: "<div class='" + ClassName.DECORATOR + "'></div>"
		},
		trigger: {
			start: 'mousedown touchstart',
			end: 'mouseup mouseleave touchend'
		},
		touchUserAgentRegex: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i,
		duration: 500
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Ripples = function () {
		function Ripples($element, config) {
			var _this47 = this;

			_classCallCheck(this, Ripples);

			this.$element = $element;

			// console.log(`Adding ripples to ${Util.describe(this.$element)}`)  // eslint-disable-line no-console
			this.config = $.extend(true, {}, Default, config);

			// attach initial listener
			this.$element.on(this.config.trigger.start, function (event) {
				_this47._onStartRipple(event);
			});
		}

		_createClass(Ripples, [{
			key: "dispose",
			value: function dispose() {
				this.$element.data(DATA_KEY, null);
				this.$element = null;
				this.$container = null;
				this.$decorator = null;
				this.config = null;
			}

			// ------------------------------------------------------------------------
			// private

		}, {
			key: "_onStartRipple",
			value: function _onStartRipple(event) {
				var _this48 = this;

				// Verify if the user is just touching on a device and return if so
				if (this._isTouch() && event.type === 'mousedown') {
					return;
				}

				// Find or create the ripple container element
				this._findOrCreateContainer();

				// Get relY and relX positions of the container element
				var relY = this._getRelY(event);
				var relX = this._getRelX(event);

				// If relY and/or relX are false, return the event
				if (!relY && !relX) {
					return;
				}

				// set the location and color each time (even if element is cached)
				this.$decorator.css({
					left: relX,
					top: relY,
					'background-color': this._getRipplesColor()
				});

				// Make sure the ripple has the styles applied (ugly hack but it works)
				this._forceStyleApplication();

				// Turn on the ripple animation
				this.rippleOn();

				// Call the rippleEnd function when the transition 'on' ends
				setTimeout(function () {
					_this48.rippleEnd();
				}, this.config.duration);

				// Detect when the user leaves the element to cleanup if not already done?
				this.$element.on(this.config.trigger.end, function () {
					if (_this48.$decorator) {
						// guard against race condition/mouse attack
						_this48.$decorator.data('mousedown', 'off');

						if (_this48.$decorator.data('animating') === 'off') {
							_this48.rippleOut();
						}
					}
				});
			}
		}, {
			key: "_findOrCreateContainer",
			value: function _findOrCreateContainer() {
				if (!this.$container || !this.$container.length > 0) {
					this.$element.append(this.config.container.template);
					this.$container = this.$element.find(Selector.CONTAINER);
				}

				// always add the rippleElement, it is always removed
				this.$container.append(this.config.decorator.template);
				this.$decorator = this.$container.find(Selector.DECORATOR);
			}

			// Make sure the ripple has the styles applied (ugly hack but it works)

		}, {
			key: "_forceStyleApplication",
			value: function _forceStyleApplication() {
				return window.getComputedStyle(this.$decorator[0]).opacity;
			}

			/**
    * Get the relX
    */

		}, {
			key: "_getRelX",
			value: function _getRelX(event) {
				var wrapperOffset = this.$container.offset();

				var result = null;
				if (!this._isTouch()) {
					// Get the mouse position relative to the ripple wrapper
					result = event.pageX - wrapperOffset.left;
				} else {
					// Make sure the user is using only one finger and then get the touch
					//  position relative to the ripple wrapper
					event = event.originalEvent;

					if (event.touches.length === 1) {
						result = event.touches[0].pageX - wrapperOffset.left;
					} else {
						result = false;
					}
				}

				return result;
			}

			/**
    * Get the relY
    */

		}, {
			key: "_getRelY",
			value: function _getRelY(event) {
				var containerOffset = this.$container.offset();
				var result = null;

				if (!this._isTouch()) {
					/**
      * Get the mouse position relative to the ripple wrapper
      */
					result = event.pageY - containerOffset.top;
				} else {
					/**
      * Make sure the user is using only one finger and then get the touch
      * position relative to the ripple wrapper
      */
					event = event.originalEvent;

					if (event.touches.length === 1) {
						result = event.touches[0].pageY - containerOffset.top;
					} else {
						result = false;
					}
				}

				return result;
			}

			/**
    * Get the ripple color
    */

		}, {
			key: "_getRipplesColor",
			value: function _getRipplesColor() {
				var color = this.$element.data('ripple-color') ? this.$element.data('ripple-color') : window.getComputedStyle(this.$element[0]).color;
				return color;
			}

			/**
    * Verify if the client is using a mobile device
    */

		}, {
			key: "_isTouch",
			value: function _isTouch() {
				return this.config.touchUserAgentRegex.test(navigator.userAgent);
			}

			/**
    * End the animation of the ripple
    */

		}, {
			key: "rippleEnd",
			value: function rippleEnd() {
				if (this.$decorator) {
					// guard against race condition/mouse attack
					this.$decorator.data('animating', 'off');

					if (this.$decorator.data('mousedown') === 'off') {
						this.rippleOut(this.$decorator);
					}
				}
			}

			/**
    * Turn off the ripple effect
    */

		}, {
			key: "rippleOut",
			value: function rippleOut() {
				var _this49 = this;

				this.$decorator.off();

				if (Util$2.transitionEndSupported()) {
					this.$decorator.addClass('ripple-out');
				} else {
					this.$decorator.animate({ opacity: 0 }, 100, function () {
						_this49.$decorator.trigger('transitionend');
					});
				}

				this.$decorator.on(Util$2.transitionEndSelector(), function () {
					if (_this49.$decorator) {
						_this49.$decorator.remove();
						_this49.$decorator = null;
					}
				});
			}

			/**
    * Turn on the ripple effect
    */

		}, {
			key: "rippleOn",
			value: function rippleOn() {
				var _this50 = this;

				var size = this._getNewSize();

				if (Util$2.transitionEndSupported()) {
					this.$decorator.css({
						'-ms-transform': "scale(" + size + ")",
						'-moz-transform': "scale(" + size + ")",
						'-webkit-transform': "scale(" + size + ")",
						transform: "scale(" + size + ")"
					}).addClass('ripple-on').data('animating', 'on').data('mousedown', 'on');
				} else {
					this.$decorator.animate({
						width: Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * 2,
						height: Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * 2,
						'margin-left': Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * -1,
						'margin-top': Math.max(this.$element.outerWidth(), this.$element.outerHeight()) * -1,
						opacity: 0.2
					}, this.config.duration, function () {
						_this50.$decorator.trigger('transitionend');
					});
				}
			}

			/**
    * Get the new size based on the element height/width and the ripple width
    */

		}, {
			key: "_getNewSize",
			value: function _getNewSize() {
				return Math.max(this.$element.outerWidth(), this.$element.outerHeight()) / this.$decorator.outerWidth() * 2.5;
			}

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Ripples($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Ripples;
	}();

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Ripples._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Ripples;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Ripples._jQueryInterface;
	};

	return Ripples;
}(jQuery);

var Autofill = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'autofill';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = "bmd" + (NAME.charAt(0).toUpperCase() + NAME.slice(1));
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	var Default = {};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var Autofill = function (_Base4) {
		_inherits(Autofill, _Base4);

		function Autofill($element, config) {
			_classCallCheck(this, Autofill);

			var _this51 = _possibleConstructorReturn(this, (Autofill.__proto__ || Object.getPrototypeOf(Autofill)).call(this, $element, $.extend(true, {}, Default, config)));

			_this51._watchLoading();
			_this51._attachEventHandlers();
			return _this51;
		}

		_createClass(Autofill, [{
			key: "dispose",
			value: function dispose() {
				_get(Autofill.prototype.__proto__ || Object.getPrototypeOf(Autofill.prototype), "dispose", this).call(this, DATA_KEY);
			}

			// ------------------------------------------------------------------------
			// private

		}, {
			key: "_watchLoading",
			value: function _watchLoading() {
				var _this52 = this;

				// After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them
				setTimeout(function () {
					clearInterval(_this52._onLoading);
				}, 10000);
			}

			// This part of code will detect autofill when the page is loading (username and password inputs for example)

		}, {
			key: "_onLoading",
			value: function _onLoading() {
				setInterval(function () {
					$('input[type!=checkbox]').each(function (index, element) {
						var $element = $(element);
						if ($element.val() && $element.val() !== $element.attr('value')) {
							$element.trigger('change');
						}
					});
				}, 100);
			}
		}, {
			key: "_attachEventHandlers",
			value: function _attachEventHandlers() {
				// Listen on inputs of the focused form
				//  (because user can select from the autofill dropdown only when the input has focus)
				var focused = null;
				$(document).on('focus', 'input', function (event) {
					var $inputs = $(event.currentTarget).closest('form').find('input').not('[type=file]');
					focused = setInterval(function () {
						$inputs.each(function (index, element) {
							var $element = $(element);
							if ($element.val() !== $element.attr('value')) {
								$element.trigger('change');
							}
						});
					}, 100);
				}).on('blur', '.form-group input', function () {
					clearInterval(focused);
				});
			}

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new Autofill($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return Autofill;
	}(Base);

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = Autofill._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = Autofill;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return Autofill._jQueryInterface;
	};

	return Autofill;
}(jQuery);

/**
 * $.bootstrapMaterialDesign(config) is a macro class to configure the components generally
 *  used in Material Design for Bootstrap.  You may pass overrides to the configurations
 *  which will be passed into each component, or you may omit use of this class and
 *  configure each component separately.
 */
var BootstrapMaterialDesign = function ($) {

	/**
  * ------------------------------------------------------------------------
  * Constants
  * ------------------------------------------------------------------------
  */
	var NAME = 'bootstrapMaterialDesign';
	var DATA_KEY = "bmd." + NAME;
	var JQUERY_NAME = NAME; // retain this full name since it is long enough not to conflict
	var JQUERY_NO_CONFLICT = $.fn[JQUERY_NAME];

	/**
  * Global configuration:
  *  The global configuration hash will be mixed in to each components' config.
  *    e.g. calling $.bootstrapMaterialDesign({global: { validate: true } }) would pass `validate:true` to every component
  *
  *
  * Component configuration:
  *  - selector: may be a string or an array.  Any array will be joined with a comma to generate the selector
  *  - disable any component by defining it as false with an override. e.g. $.bootstrapMaterialDesign({ autofill: false })
  *
  *  @see each individual component for more configuration settings.
  */
	var Default = {
		global: {
			validate: false,
			label: {
				className: 'bmd-label-static' // default style of label to be used if not specified in the html markup
			}
		},
		autofill: {
			selector: 'body'
		},
		checkbox: {
			selector: '.checkbox > label > input[type=checkbox]'
		},
		checkboxInline: {
			selector: 'label.checkbox-inline > input[type=checkbox]'
		},
		collapseInline: {
			selector: '.bmd-collapse-inline [data-toggle="collapse"]'
		},
		drawer: {
			selector: '.bmd-layout-drawer'
		},
		file: {
			selector: 'input[type=file]'
		},
		radio: {
			selector: '.radio > label > input[type=radio]'
		},
		radioInline: {
			selector: 'label.radio-inline > input[type=radio]'
		},
		ripples: {
			//selector: ['.btn:not(.btn-link):not(.ripple-none)'] // testing only
			selector: ['.btn:not(.btn-link):not(.ripple-none)', '.card-image:not(.ripple-none)', '.navbar a:not(.ripple-none)', '.dropdown-menu a:not(.ripple-none)', '.nav-tabs a:not(.ripple-none)', '.pagination li:not(.active):not(.disabled) a:not(.ripple-none)', '.ripple' // generic marker class to add ripple to elements
			]
		},
		select: {
			selector: ['select']
		},
		switch: {
			selector: '.switch > label > input[type=checkbox]'
		},
		text: {
			// omit inputs we have specialized components to handle - we need to match text, email, etc.  The easiest way to do this appears to be just omit the ones we don't want to match and let the rest fall through to this.
			selector: ["input:not([type=hidden]):not([type=checkbox]):not([type=radio]):not([type=file]):not([type=button]):not([type=submit]):not([type=reset])"]
		},
		textarea: {
			selector: ['textarea']
		},
		arrive: true,
		// create an ordered component list for instantiation
		instantiation: ['ripples', 'checkbox', 'checkboxInline', 'collapseInline', 'drawer',
		//'file',
		'radio', 'radioInline', 'switch', 'text', 'textarea', 'select', 'autofill']
	};

	/**
  * ------------------------------------------------------------------------
  * Class Definition
  * ------------------------------------------------------------------------
  */

	var BootstrapMaterialDesign = function () {
		function BootstrapMaterialDesign($element, config) {
			var _this53 = this;

			_classCallCheck(this, BootstrapMaterialDesign);

			this.$element = $element;
			this.config = $.extend(true, {}, Default, config);
			var $document = $(document);

			var _iteratorNormalCompletion5 = true;
			var _didIteratorError5 = false;
			var _iteratorError5 = undefined;

			try {
				var _loop = function _loop() {
					var component = _step5.value;


					// the component's config fragment is passed in directly, allowing users to override
					var componentConfig = _this53.config[component];

					// check to make sure component config is enabled (not `false`)
					if (componentConfig) {

						// assemble the selector as it may be an array
						var selector = _this53._resolveSelector(componentConfig);

						// mix in global options
						componentConfig = $.extend(true, {}, _this53.config.global, componentConfig);

						// create the jquery fn name e.g. 'bmdText' for 'text'
						var componentName = "" + (component.charAt(0).toUpperCase() + component.slice(1));
						var jqueryFn = "bmd" + componentName;

						try {
							// safely instantiate component on selector elements with config, report errors and move on.
							// console.debug(`instantiating: $('${selector}')[${jqueryFn}](${componentConfig})`) // eslint-disable-line no-console
							$(selector)[jqueryFn](componentConfig);

							// add to arrive if present and enabled
							if (document.arrive && _this53.config.arrive) {
								$document.arrive(selector, function () {
									// eslint-disable-line no-loop-func
									$(this)[jqueryFn](componentConfig);
								});
							}
						} catch (e) {
							var message = "Failed to instantiate component: $('" + selector + "')[" + jqueryFn + "](" + componentConfig + ")";
							console.error(message, e, "\nSelected elements: ", $(selector)); // eslint-disable-line no-console
							throw e;
						}
					}
				};

				for (var _iterator5 = this.config.instantiation[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
					_loop();
				}
			} catch (err) {
				_didIteratorError5 = true;
				_iteratorError5 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion5 && _iterator5.return) {
						_iterator5.return();
					}
				} finally {
					if (_didIteratorError5) {
						throw _iteratorError5;
					}
				}
			}
		}

		_createClass(BootstrapMaterialDesign, [{
			key: "dispose",
			value: function dispose() {
				this.$element.data(DATA_KEY, null);
				this.$element = null;
				this.config = null;
			}

			// ------------------------------------------------------------------------
			// private

		}, {
			key: "_resolveSelector",
			value: function _resolveSelector(componentConfig) {
				var selector = componentConfig.selector;
				if (Array.isArray(selector)) {
					selector = selector.join(', ');
				}

				return selector;
			}

			// ------------------------------------------------------------------------
			// static

		}], [{
			key: "_jQueryInterface",
			value: function _jQueryInterface(config) {
				return this.each(function () {
					var $element = $(this);
					var data = $element.data(DATA_KEY);

					if (!data) {
						data = new BootstrapMaterialDesign($element, config);
						$element.data(DATA_KEY, data);
					}
				});
			}
		}]);

		return BootstrapMaterialDesign;
	}();

	/**
  * ------------------------------------------------------------------------
  * jQuery
  * ------------------------------------------------------------------------
  */


	$.fn[JQUERY_NAME] = BootstrapMaterialDesign._jQueryInterface;
	$.fn[JQUERY_NAME].Constructor = BootstrapMaterialDesign;
	$.fn[JQUERY_NAME].noConflict = function () {
		$.fn[JQUERY_NAME] = JQUERY_NO_CONFLICT;
		return BootstrapMaterialDesign._jQueryInterface;
	};

	return BootstrapMaterialDesign;
}(jQuery);

/*
 * This is the main entry point.
 *
 * You can import other modules here, including external packages. When bundling using rollup you can mark those modules as external and have them excluded or, if they have a jsnext:main entry in their package.json (like this package does), let rollup bundle them into your dist file.
 *
 * IMPORTANT NOTE: If you are ultimately creating an iife/self executing bundle for the browser, be sure to:
 *  import 'babel-polyfill'
 *
 * at your application entry point.  This is necessary for browsers that do not yet support some ES2015 runtime necessities such as Symbol.  We do this in `index-iife.js` for our iife rollup bundle.
 */

// Bootstrap components
// invalidComponentMatches is currently disabled due to https://github.com/rollup/rollup/issues/428#issuecomment-170066452