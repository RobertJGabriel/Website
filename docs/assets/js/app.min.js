(function() {
  var autorun, bannerText, header, navText;

  window.robertjames = {};

  header = $('.clearHeader');

  navText = $('#logo1');

  bannerText = $('#logo2');

  robertjames.easterEgg = function() {
    cheet('↑ ↑ ↓ ↓ ← → ← → b a', function() {
      console.log('hi');
      $('#easteregg').modal('show');
    });
  };

  robertjames.events = function() {
    $('.menu-button').click(function(e) {
      $('.menu-bar').addClass('open');
      $('.grey').addClass('show');
      $('.overlay').show();
      e.stopPropagation();
    });
    $(document).click(function(e) {
      if (!$(e.target).is('.menu-bar *,.menu-bar')) {
        $('.menu-bar').removeClass('open');
        $('.grey').removeClass('show');
        $('.overlay').hide();
      }
    });
  };

  robertjames.colors = function() {
    var aTagsElements, h1Elements, h3Elements, hrElements, i;
    if (bannerText.length > 0) {
      h1Elements = document.getElementsByTagName('h1');
      hrElements = document.getElementsByTagName('hr');
      h3Elements = document.getElementsByTagName('h3');
      aTagsElements = document.getElementsByTagName('a');
    }
    if (typeof h1Elements !== 'undefined') {
      i = 1;
      while (i < h1Elements.length) {
        i++;
      }
    }
    if (typeof h3Elements !== 'undefined') {
      i = 0;
      while (i < h3Elements.length) {
        i++;
      }
    }
    if (typeof hrElements !== 'undefined') {
      i = 0;
      while (i < hrElements.length) {
        i++;
      }
    }
    if (typeof aTagsElements !== 'undefined') {
      i = 6;
      while (i < aTagsElements.length) {
        i++;
      }
    }
  };

  robertjames.init = function() {
    robertjames.events();
    robertjames.easterEgg();
    robertjames.colors();
    navText.addClass('show');
    navText.text('Robert James Gabriel');
  };

  robertjames.init();

  autorun = function() {
    var ServiceWorker;
    ServiceWorker = void 0;
    ServiceWorker = (function() {
      var ServiceWorker;
      ServiceWorker = function() {
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('./serviceWorker.js').then((function(_this) {
            return function(registration) {
              if (registration.installing) {

              } else if (registration.waiting) {

              } else if (registration.active) {
                _this.subscribe(registration);
              }
            };
          })(this))['catch'](function(err) {});
        }
      };
      ServiceWorker.prototype.unsubscribe = function(serviceWorkerReg) {
        if ('serviceWorker' in navigator) {
          serviceWorkerReg.pushManager.getSubscription().then(function(subscription) {
            subscription.unsubscribe();
          });
        }
      };
      ServiceWorker.prototype.subscribe = function(serviceWorkerReg) {
        if ('serviceWorker' in navigator) {
          serviceWorkerReg.pushManager.subscribe({
            userVisibleOnly: true
          }).then(function(subscription) {});
          return;
        }
      };
      return ServiceWorker;
    })();
    return new ServiceWorker;
  };

  if (window.addEventListener) {
    window.addEventListener('load', autorun, false);
  } else if (window.attachEvent) {
    window.attachEvent('onload', autorun);
  } else {
    window.onload = autorun;
  }

}).call(this);

(function() {
  var bc, colorIndices, colors, gradientSpeed, step, updateGradient;

  colors = new Array([62, 35, 255], [60, 255, 60], [255, 35, 98], [45, 175, 230], [255, 0, 255], [255, 128, 0]);

  step = 0;

  colorIndices = [0, 1, 2, 3];

  gradientSpeed = 0.002;

  updateGradient = function() {
    var b1, b2, c0_0, c0_1, c1_0, c1_1, color1, color2, g1, g2, istep, r1, r2;
    if ($ === void 0) {
      return;
    }
    c0_0 = colors[colorIndices[0]];
    c0_1 = colors[colorIndices[1]];
    c1_0 = colors[colorIndices[2]];
    c1_1 = colors[colorIndices[3]];
    istep = 1 - step;
    r1 = Math.round(istep * c0_0[0] + step * c0_1[0]);
    g1 = Math.round(istep * c0_0[1] + step * c0_1[1]);
    b1 = Math.round(istep * c0_0[2] + step * c0_1[2]);
    color1 = 'rgb(' + r1 + ',' + g1 + ',' + b1 + ')';
    r2 = Math.round(istep * c1_0[0] + step * c1_1[0]);
    g2 = Math.round(istep * c1_0[1] + step * c1_1[1]);
    b2 = Math.round(istep * c1_0[2] + step * c1_1[2]);
    color2 = 'rgb(' + r2 + ',' + g2 + ',' + b2 + ')';
    step += gradientSpeed;
    if (step >= 1) {
      step %= 1;
      colorIndices[0] = colorIndices[1];
      colorIndices[2] = colorIndices[3];
    }
  };

  if (!$("body").hasClass("story")) {
    setInterval(updateGradient, 10);
  } else {
    bc = $('header').css('background-color');
    $('.navbar').css('background-color', bc);
  }

}).call(this);

(function() {
  var cacheFiles, cacheName, offlineUrl;

  cacheName = 'v1.30';

  offlineUrl = '404.html';

  cacheFiles = [];

  self.addEventListener('install', function(e) {
    e.waitUntil(caches.open(cacheName).then(function(cache) {
      return cache.addAll([cacheFiles, offlineUrl]);
    }));
  });

  self.addEventListener('push', function(event) {
    var title;
    title = 'Hey';
    event.waitUntil(self.registration.showNotification(title, {
      body: 'Click to read the latest update',
      icon: './assets/images/196.png',
      tag: 'new-article'
    }));
  });

  self.addEventListener('activate', function(e) {
    e.waitUntil(caches.keys().then(function(cacheNames) {
      return Promise.all(cacheNames.map(function(thisCacheName) {
        if (thisCacheName !== cacheName) {
          return caches["delete"](thisCacheName);
        }
      }));
    }));
  });

  self.addEventListener('notificationclick', function(event) {
    var url;
    event.notification.close();
    url = './index.html?notification=true';
    event.waitUntil(clients.matchAll({
      type: 'window'
    }).then(function(windowClients) {
      var client, i;
      i = 0;
      while (i < windowClients.length) {
        client = windowClients[i];
        if (client.url === url && 'focus' in client) {
          return client.focus();
        }
        i++;
      }
      if (clients.openWindow) {
        return clients.openWindow(url);
      }
    }));
  });

  self.addEventListener('fetch', function(event) {
    event.respondWith(fetch(event.request)["catch"](function() {
      return caches.match(event.request);
    }));
  });

}).call(this);
